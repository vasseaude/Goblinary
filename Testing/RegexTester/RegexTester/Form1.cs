using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace RegexTester
{
	public partial class Form1 : Form
	{
		public Form1()
		{
			this.InitializeComponent();

			//this.patternEditor.Text
			//	= @"^"
			//		+ @"(?<EffectName>(?:(?! \+| \-| [0-9]+| \(| to | on | if | with | per ).)+)"
			//		+ @"(?: +(?<Magnitude>(?:\+|\-)?[0-9]+%?))?"
			//		+ @"(?: ?\("
			//			+ @"(?:(?<Duration>(?<DurationValue>[0-9]+) (?<DurationUnits>Rounds?|Seconds?)))?"
			//			+ @"(?:, )?"
			//			+ @"(?:(?<Chance>(?<ChanceValue>[0-9]+)(?<ChanceUnits>% Chance)))?"
			//			+ @"(?:(?<Distance>(?<DistanceValue>\-?[0-9]+) (?<DistanceUnits>Meters?)))?"
			//		+ @"\))?"
			//		+ @"(?: +(?<Target>to +(?<TargetIdentifier>Self|All(?! Targets))))?"
			//		+ @"(?: +(?<Discriminator>(?:to All (?<DiscriminatorTarget>Targets) )?with|if (?<DiscriminatorTarget>Attacker|Target) (?:has|is)|per|on) (?<Condition>(?:(?! to ).)+)(?: (?<ConditionTarget>to Self))?)?"
			//		+ @"(?<Remainder>.*)"
			//	+ @"$"
			//	;
			this.patternEditor.Text
				= @"^"
					+ @"(?<EffectName>(?:(?! \+| \-| [0-9]+| \(| to | on | if | with | per ).)+)"
					+ @"(?<Descriptor>"
						+ @"(?: +(?:(?:\+|\-)?[0-9]+%?))?"
						+ @"(?: ?\("
							+ @"(?:(?:(?:[0-9]+) (?:Rounds?|Seconds?)))?"
							+ @"(?:, )?"
							+ @"(?:(?:(?:[0-9]+)(?:% Chance)))?"
							+ @"(?:(?:(?:\-?[0-9]+) (?:Meters?)))?"
						+ @"\))?"
						+ @"(?: +(?:to +(?:Self|All(?! Targets))))?"
					+ @")?"
					+ @"(?:(?: +(?<ConditionalPrefix>(?:to All (?:Targets) )?with|if (?:Attacker|Target) (?:has|is)|per|on) )(?<Condition>(?:(?! to ).)+)(?: (?<ConditionalSuffix>to Self))?)?"
					+ @"(?<Remainder>.*)"
				+ @"$"
				;

			#region Set Inputs

			this.inputs.Add("Acid Damage");
			this.inputs.Add("Acid Resistance +1");
			this.inputs.Add("Acid Resistance +2");
			this.inputs.Add("Acid Resistance +3");
			this.inputs.Add("Acid Resistance +4");
			this.inputs.Add("Acid Resistance +5");
			this.inputs.Add("Acid Resistant (10 Rounds)");
			this.inputs.Add("Acid Resistant (14 Rounds) to Self");
			this.inputs.Add("Acid Resistant (19 Rounds)");
			this.inputs.Add("Acid Resistant (20 Rounds) to Self");
			this.inputs.Add("Acid Resistant (22 Rounds) to Self");
			this.inputs.Add("Acid Resistant (26 Rounds) to Self");
			this.inputs.Add("Acid Resistant (28 Rounds) to Self");
			this.inputs.Add("Acid Resistant (30 Rounds) to Self");
			this.inputs.Add("Acid Resistant (34 Rounds)");
			this.inputs.Add("Acid Resistant (45 Rounds) to Self");
			this.inputs.Add("Acid Resistant (5 Rounds, 12% Chance) to Self if Target has Razed");
			this.inputs.Add("Acid Resistant (5 Rounds, 17% Chance) to Self if Target has Razed");
			this.inputs.Add("Acid Resistant (5 Rounds, 22% Chance) to Self if Target has Razed");
			this.inputs.Add("Acid Resistant (5 Rounds, 28% Chance) to Self if Target has Razed");
			this.inputs.Add("Acid Resistant (5 Rounds, 34% Chance) to Self if Target has Razed");
			this.inputs.Add("Acid Resistant (7 Rounds) to Self");
			this.inputs.Add("Acid Resistant (8 Rounds)");
			this.inputs.Add("Acid Resistant (84 Rounds) to Self");
			this.inputs.Add("Afflicted 10 on Flat-Footed");
			this.inputs.Add("Afflicted 10 to All");
			this.inputs.Add("Afflicted 100 to All");
			this.inputs.Add("Afflicted 11 on Critical Hit");
			this.inputs.Add("Afflicted 11 on Flat-Footed");
			this.inputs.Add("Afflicted 12 on Critical Hit");
			this.inputs.Add("Afflicted 12 on Flat-Footed");
			this.inputs.Add("Afflicted 13 on Critical Hit");
			this.inputs.Add("Afflicted 13 on Flat-Footed");
			this.inputs.Add("Afflicted 14 on Flat-Footed");
			this.inputs.Add("Afflicted 15 on Critical Hit");
			this.inputs.Add("Afflicted 15 on Flat-Footed");
			this.inputs.Add("Afflicted 17 on Critical Hit");
			this.inputs.Add("Afflicted 19 on Critical Hit");
			this.inputs.Add("Afflicted 20");
			this.inputs.Add("Afflicted 20 to All");
			this.inputs.Add("Afflicted 21 on Critical Hit");
			this.inputs.Add("Afflicted 22 on Critical Hit");
			this.inputs.Add("Afflicted 23 on Critical Hit");
			this.inputs.Add("Afflicted 25 on Critical Hit");
			this.inputs.Add("Afflicted 27 on Critical Hit");
			this.inputs.Add("Afflicted 30 if Target is Distressed");
			this.inputs.Add("Afflicted 30 to All");
			this.inputs.Add("Afflicted 32 on Critical Hit");
			this.inputs.Add("Afflicted 35 if Target is Disrupted");
			this.inputs.Add("Afflicted 40");
			this.inputs.Add("Afflicted 40 if Target is Distressed");
			this.inputs.Add("Afflicted 40 to All");
			this.inputs.Add("Afflicted 45");
			this.inputs.Add("Afflicted 5");
			this.inputs.Add("Afflicted 5 on Critical Hit");
			this.inputs.Add("Afflicted 5 on Flat-Footed");
			this.inputs.Add("Afflicted 50 to All");
			this.inputs.Add("Afflicted 50 to All Targets with Opportunity");
			this.inputs.Add("Afflicted 6 on Flat-Footed");
			this.inputs.Add("Afflicted 60");
			this.inputs.Add("Afflicted 60 if Target is Distressed");
			this.inputs.Add("Afflicted 60 to All");
			this.inputs.Add("Afflicted 65");
			this.inputs.Add("Afflicted 7 on Critical Hit");
			this.inputs.Add("Afflicted 7 on Flat-Footed");
			this.inputs.Add("Afflicted 70 to All Targets with Disrupted");
			this.inputs.Add("Afflicted 8 on Flat-Footed");
			this.inputs.Add("Afflicted 80 if Target is Disrupted");
			this.inputs.Add("Afflicted 9 on Critical Hit");
			this.inputs.Add("Afflicted 9 on Flat-Footed");
			this.inputs.Add("Afflicted Recovery Bonus +1");
			this.inputs.Add("Afflicted Recovery Bonus +10");
			this.inputs.Add("Afflicted Recovery Bonus +2");
			this.inputs.Add("Afflicted Recovery Bonus +3");
			this.inputs.Add("Afflicted Recovery Bonus +4");
			this.inputs.Add("Afflicted Recovery Bonus +5");
			this.inputs.Add("Afflicted Recovery Bonus +6");
			this.inputs.Add("Afflicted Recovery Bonus +7");
			this.inputs.Add("Afflicted Recovery Bonus +8");
			this.inputs.Add("Afflicted Recovery Bonus +9");
			this.inputs.Add("Alchemist +10");
			this.inputs.Add("Alchemist +100");
			this.inputs.Add("Alchemist +11");
			this.inputs.Add("Alchemist +110");
			this.inputs.Add("Alchemist +12");
			this.inputs.Add("Alchemist +120");
			this.inputs.Add("Alchemist +13");
			this.inputs.Add("Alchemist +130");
			this.inputs.Add("Alchemist +14");
			this.inputs.Add("Alchemist +140");
			this.inputs.Add("Alchemist +15");
			this.inputs.Add("Alchemist +150");
			this.inputs.Add("Alchemist +160");
			this.inputs.Add("Alchemist +170");
			this.inputs.Add("Alchemist +180");
			this.inputs.Add("Alchemist +190");
			this.inputs.Add("Alchemist +2");
			this.inputs.Add("Alchemist +20");
			this.inputs.Add("Alchemist +200");
			this.inputs.Add("Alchemist +30");
			this.inputs.Add("Alchemist +40");
			this.inputs.Add("Alchemist +5");
			this.inputs.Add("Alchemist +50");
			this.inputs.Add("Alchemist +6");
			this.inputs.Add("Alchemist +60");
			this.inputs.Add("Alchemist +7");
			this.inputs.Add("Alchemist +70");
			this.inputs.Add("Alchemist +8");
			this.inputs.Add("Alchemist +80");
			this.inputs.Add("Alchemist +9");
			this.inputs.Add("Alchemist +90");
			this.inputs.Add("Alert (1 Rounds) to Self");
			this.inputs.Add("Alert (15 Rounds)");
			this.inputs.Add("Alert (6 Rounds) to Self");
			this.inputs.Add("All Resistances +1");
			this.inputs.Add("All Resistances +2");
			this.inputs.Add("All Resistances +3");
			this.inputs.Add("All Resistances +4");
			this.inputs.Add("All Resistances +5");
			this.inputs.Add("All Resistances +6");
			this.inputs.Add("All Resistances +7");
			this.inputs.Add("Apothecary +10");
			this.inputs.Add("Apothecary +100");
			this.inputs.Add("Apothecary +11");
			this.inputs.Add("Apothecary +110");
			this.inputs.Add("Apothecary +12");
			this.inputs.Add("Apothecary +120");
			this.inputs.Add("Apothecary +13");
			this.inputs.Add("Apothecary +130");
			this.inputs.Add("Apothecary +14");
			this.inputs.Add("Apothecary +140");
			this.inputs.Add("Apothecary +15");
			this.inputs.Add("Apothecary +150");
			this.inputs.Add("Apothecary +160");
			this.inputs.Add("Apothecary +170");
			this.inputs.Add("Apothecary +180");
			this.inputs.Add("Apothecary +190");
			this.inputs.Add("Apothecary +2");
			this.inputs.Add("Apothecary +20");
			this.inputs.Add("Apothecary +200");
			this.inputs.Add("Apothecary +30");
			this.inputs.Add("Apothecary +40");
			this.inputs.Add("Apothecary +5");
			this.inputs.Add("Apothecary +50");
			this.inputs.Add("Apothecary +6");
			this.inputs.Add("Apothecary +60");
			this.inputs.Add("Apothecary +7");
			this.inputs.Add("Apothecary +70");
			this.inputs.Add("Apothecary +8");
			this.inputs.Add("Apothecary +80");
			this.inputs.Add("Apothecary +9");
			this.inputs.Add("Apothecary +90");
			this.inputs.Add("Arcana +10");
			this.inputs.Add("Arcana +100");
			this.inputs.Add("Arcana +11");
			this.inputs.Add("Arcana +110");
			this.inputs.Add("Arcana +12");
			this.inputs.Add("Arcana +120");
			this.inputs.Add("Arcana +13");
			this.inputs.Add("Arcana +130");
			this.inputs.Add("Arcana +14");
			this.inputs.Add("Arcana +140");
			this.inputs.Add("Arcana +15");
			this.inputs.Add("Arcana +150");
			this.inputs.Add("Arcana +16");
			this.inputs.Add("Arcana +160");
			this.inputs.Add("Arcana +170");
			this.inputs.Add("Arcana +180");
			this.inputs.Add("Arcana +190");
			this.inputs.Add("Arcana +2");
			this.inputs.Add("Arcana +20");
			this.inputs.Add("Arcana +200");
			this.inputs.Add("Arcana +24");
			this.inputs.Add("Arcana +28");
			this.inputs.Add("Arcana +30");
			this.inputs.Add("Arcana +4");
			this.inputs.Add("Arcana +40");
			this.inputs.Add("Arcana +5");
			this.inputs.Add("Arcana +50");
			this.inputs.Add("Arcana +6");
			this.inputs.Add("Arcana +60");
			this.inputs.Add("Arcana +7");
			this.inputs.Add("Arcana +70");
			this.inputs.Add("Arcana +8");
			this.inputs.Add("Arcana +80");
			this.inputs.Add("Arcana +9");
			this.inputs.Add("Arcana +90");
			this.inputs.Add("Arcane Attack Bonus +12");
			this.inputs.Add("Arcane Attack Bonus +16");
			this.inputs.Add("Arcane Attack Bonus +20");
			this.inputs.Add("Arcane Attack Bonus +24");
			this.inputs.Add("Arcane Attack Bonus +28");
			this.inputs.Add("Arcane Attack Bonus +32");
			this.inputs.Add("Arcane Attack Bonus +36");
			this.inputs.Add("Arcane Attack Bonus +4");
			this.inputs.Add("Arcane Attack Bonus +40");
			this.inputs.Add("Arcane Attack Bonus +8");
			this.inputs.Add("Architect +10");
			this.inputs.Add("Architect +100");
			this.inputs.Add("Architect +110");
			this.inputs.Add("Architect +120");
			this.inputs.Add("Architect +130");
			this.inputs.Add("Architect +140");
			this.inputs.Add("Architect +150");
			this.inputs.Add("Architect +160");
			this.inputs.Add("Architect +170");
			this.inputs.Add("Architect +180");
			this.inputs.Add("Architect +190");
			this.inputs.Add("Architect +20");
			this.inputs.Add("Architect +200");
			this.inputs.Add("Architect +30");
			this.inputs.Add("Architect +40");
			this.inputs.Add("Architect +50");
			this.inputs.Add("Architect +60");
			this.inputs.Add("Architect +70");
			this.inputs.Add("Architect +80");
			this.inputs.Add("Architect +90");
			this.inputs.Add("Area");
			this.inputs.Add("Area to Self");
			this.inputs.Add("Armorsmith +10");
			this.inputs.Add("Armorsmith +100");
			this.inputs.Add("Armorsmith +11");
			this.inputs.Add("Armorsmith +110");
			this.inputs.Add("Armorsmith +12");
			this.inputs.Add("Armorsmith +120");
			this.inputs.Add("Armorsmith +13");
			this.inputs.Add("Armorsmith +130");
			this.inputs.Add("Armorsmith +14");
			this.inputs.Add("Armorsmith +140");
			this.inputs.Add("Armorsmith +15");
			this.inputs.Add("Armorsmith +150");
			this.inputs.Add("Armorsmith +160");
			this.inputs.Add("Armorsmith +170");
			this.inputs.Add("Armorsmith +180");
			this.inputs.Add("Armorsmith +190");
			this.inputs.Add("Armorsmith +2");
			this.inputs.Add("Armorsmith +20");
			this.inputs.Add("Armorsmith +200");
			this.inputs.Add("Armorsmith +30");
			this.inputs.Add("Armorsmith +40");
			this.inputs.Add("Armorsmith +5");
			this.inputs.Add("Armorsmith +50");
			this.inputs.Add("Armorsmith +6");
			this.inputs.Add("Armorsmith +60");
			this.inputs.Add("Armorsmith +7");
			this.inputs.Add("Armorsmith +70");
			this.inputs.Add("Armorsmith +8");
			this.inputs.Add("Armorsmith +80");
			this.inputs.Add("Armorsmith +9");
			this.inputs.Add("Armorsmith +90");
			this.inputs.Add("Artificer +10");
			this.inputs.Add("Artificer +100");
			this.inputs.Add("Artificer +11");
			this.inputs.Add("Artificer +110");
			this.inputs.Add("Artificer +12");
			this.inputs.Add("Artificer +120");
			this.inputs.Add("Artificer +13");
			this.inputs.Add("Artificer +130");
			this.inputs.Add("Artificer +14");
			this.inputs.Add("Artificer +140");
			this.inputs.Add("Artificer +15");
			this.inputs.Add("Artificer +150");
			this.inputs.Add("Artificer +160");
			this.inputs.Add("Artificer +170");
			this.inputs.Add("Artificer +180");
			this.inputs.Add("Artificer +190");
			this.inputs.Add("Artificer +2");
			this.inputs.Add("Artificer +20");
			this.inputs.Add("Artificer +200");
			this.inputs.Add("Artificer +30");
			this.inputs.Add("Artificer +40");
			this.inputs.Add("Artificer +5");
			this.inputs.Add("Artificer +50");
			this.inputs.Add("Artificer +6");
			this.inputs.Add("Artificer +60");
			this.inputs.Add("Artificer +7");
			this.inputs.Add("Artificer +70");
			this.inputs.Add("Artificer +8");
			this.inputs.Add("Artificer +80");
			this.inputs.Add("Artificer +9");
			this.inputs.Add("Artificer +90");
			this.inputs.Add("Avoiding (1 Rounds) to Self");
			this.inputs.Add("Avoiding (3 Rounds) to Self");
			this.inputs.Add("Avoiding (40 Rounds) to Self");
			this.inputs.Add("Aware (10 Rounds) to Self");
			this.inputs.Add("Aware (4 Rounds) to Self");
			this.inputs.Add("Aware (40 Rounds) to Self");
			this.inputs.Add("Aware (8 Rounds) to Self");
			this.inputs.Add("Base Attack Bonus +10");
			this.inputs.Add("Base Attack Bonus +11");
			this.inputs.Add("Base Attack Bonus +12");
			this.inputs.Add("Base Attack Bonus +13");
			this.inputs.Add("Base Attack Bonus +14");
			this.inputs.Add("Base Attack Bonus +15");
			this.inputs.Add("Base Attack Bonus +16");
			this.inputs.Add("Base Attack Bonus +17");
			this.inputs.Add("Base Attack Bonus +18");
			this.inputs.Add("Base Attack Bonus +19");
			this.inputs.Add("Base Attack Bonus +2");
			this.inputs.Add("Base Attack Bonus +20");
			this.inputs.Add("Base Attack Bonus +21");
			this.inputs.Add("Base Attack Bonus +22");
			this.inputs.Add("Base Attack Bonus +23");
			this.inputs.Add("Base Attack Bonus +24");
			this.inputs.Add("Base Attack Bonus +25");
			this.inputs.Add("Base Attack Bonus +26");
			this.inputs.Add("Base Attack Bonus +28");
			this.inputs.Add("Base Attack Bonus +30");
			this.inputs.Add("Base Attack Bonus +4");
			this.inputs.Add("Base Attack Bonus +5");
			this.inputs.Add("Base Attack Bonus +6");
			this.inputs.Add("Base Attack Bonus +7");
			this.inputs.Add("Base Attack Bonus +8");
			this.inputs.Add("Base Attack Bonus +9");
			this.inputs.Add("Base Damage +0 with Axe");
			this.inputs.Add("Base Damage +0 with Hammer");
			this.inputs.Add("Base Damage +0 with Heavy Blade");
			this.inputs.Add("Base Damage +0 with Light Blade");
			this.inputs.Add("Base Damage +0 with Longbow");
			this.inputs.Add("Base Damage +0 with One-Handed Melee");
			this.inputs.Add("Base Damage +0 with Polearm");
			this.inputs.Add("Base Damage +0 with Ranged");
			this.inputs.Add("Base Damage +0 with Shortbow");
			this.inputs.Add("Base Damage +0 with Two-Handed Melee");
			this.inputs.Add("Base Damage +1");
			this.inputs.Add("Base Damage +1 with Axe");
			this.inputs.Add("Base Damage +1 with Hammer");
			this.inputs.Add("Base Damage +1 with Heavy Blade");
			this.inputs.Add("Base Damage +1 with Light Blade");
			this.inputs.Add("Base Damage +1 with Longbow");
			this.inputs.Add("Base Damage +1 with One-Handed Melee");
			this.inputs.Add("Base Damage +1 with Polearm");
			this.inputs.Add("Base Damage +1 with Ranged");
			this.inputs.Add("Base Damage +1 with Shortbow");
			this.inputs.Add("Base Damage +1 with Two-Handed Melee");
			this.inputs.Add("Base Damage +10");
			this.inputs.Add("Base Damage +10 if Attacker has Favored");
			this.inputs.Add("Base Damage +10 if Target has Opportunity");
			this.inputs.Add("Base Damage +10 if Target has Unbalanced");
			this.inputs.Add("Base Damage +10 if Target is Dazed");
			this.inputs.Add("Base Damage +10 if Target is Distressed");
			this.inputs.Add("Base Damage +10 with Axe");
			this.inputs.Add("Base Damage +10 with Flat-Footed");
			this.inputs.Add("Base Damage +10 with Hammer");
			this.inputs.Add("Base Damage +10 with Heavy Blade");
			this.inputs.Add("Base Damage +10 with Light Blade");
			this.inputs.Add("Base Damage +10 with Longbow");
			this.inputs.Add("Base Damage +10 with One-Handed Melee");
			this.inputs.Add("Base Damage +10 with Polearm");
			this.inputs.Add("Base Damage +10 with Ranged");
			this.inputs.Add("Base Damage +10 with Shortbow");
			this.inputs.Add("Base Damage +10 with Two-Handed Melee");
			this.inputs.Add("Base Damage +12 if Target has Opportunity");
			this.inputs.Add("Base Damage +14");
			this.inputs.Add("Base Damage +15 if Target has Opportunity");
			this.inputs.Add("Base Damage +17 if Target has Opportunity");
			this.inputs.Add("Base Damage +19 if Target has Opportunity");
			this.inputs.Add("Base Damage +2");
			this.inputs.Add("Base Damage +2 with Axe");
			this.inputs.Add("Base Damage +2 with Hammer");
			this.inputs.Add("Base Damage +2 with Heavy Blade");
			this.inputs.Add("Base Damage +2 with Light Blade");
			this.inputs.Add("Base Damage +2 with Longbow");
			this.inputs.Add("Base Damage +2 with One-Handed Melee");
			this.inputs.Add("Base Damage +2 with Polearm");
			this.inputs.Add("Base Damage +2 with Ranged");
			this.inputs.Add("Base Damage +2 with Shortbow");
			this.inputs.Add("Base Damage +2 with Two-Handed Melee");
			this.inputs.Add("Base Damage +20");
			this.inputs.Add("Base Damage +20 if Attacker has Favored");
			this.inputs.Add("Base Damage +20 if Target is Disrupted");
			this.inputs.Add("Base Damage +20 if Target is Flat-Footed");
			this.inputs.Add("Base Damage +21 if Target has Opportunity");
			this.inputs.Add("Base Damage +3");
			this.inputs.Add("Base Damage +3 with Axe");
			this.inputs.Add("Base Damage +3 with Hammer");
			this.inputs.Add("Base Damage +3 with Heavy Blade");
			this.inputs.Add("Base Damage +3 with Light Blade");
			this.inputs.Add("Base Damage +3 with Longbow");
			this.inputs.Add("Base Damage +3 with One-Handed Melee");
			this.inputs.Add("Base Damage +3 with Polearm");
			this.inputs.Add("Base Damage +3 with Ranged");
			this.inputs.Add("Base Damage +3 with Shortbow");
			this.inputs.Add("Base Damage +3 with Two-Handed Melee");
			this.inputs.Add("Base Damage +30 if Attacker has Quickened");
			this.inputs.Add("Base Damage +30 if Target is Disrupted");
			this.inputs.Add("Base Damage +30 if Target is Flat-Footed");
			this.inputs.Add("Base Damage +4");
			this.inputs.Add("Base Damage +4 with Axe");
			this.inputs.Add("Base Damage +4 with Hammer");
			this.inputs.Add("Base Damage +4 with Heavy Blade");
			this.inputs.Add("Base Damage +4 with Light Blade");
			this.inputs.Add("Base Damage +4 with Longbow");
			this.inputs.Add("Base Damage +4 with One-Handed Melee");
			this.inputs.Add("Base Damage +4 with Polearm");
			this.inputs.Add("Base Damage +4 with Ranged");
			this.inputs.Add("Base Damage +4 with Shortbow");
			this.inputs.Add("Base Damage +4 with Two-Handed Melee");
			this.inputs.Add("Base Damage +40 if Target is Flat-Footed");
			this.inputs.Add("Base Damage +5");
			this.inputs.Add("Base Damage +5 with Axe");
			this.inputs.Add("Base Damage +5 with Hammer");
			this.inputs.Add("Base Damage +5 with Heavy Blade");
			this.inputs.Add("Base Damage +5 with Light Blade");
			this.inputs.Add("Base Damage +5 with Longbow");
			this.inputs.Add("Base Damage +5 with One-Handed Melee");
			this.inputs.Add("Base Damage +5 with Polearm");
			this.inputs.Add("Base Damage +5 with Ranged");
			this.inputs.Add("Base Damage +5 with Shortbow");
			this.inputs.Add("Base Damage +5 with Two-Handed Melee");
			this.inputs.Add("Base Damage +50 if Target is Flat-Footed");
			this.inputs.Add("Base Damage +6");
			this.inputs.Add("Base Damage +6 with Axe");
			this.inputs.Add("Base Damage +6 with Hammer");
			this.inputs.Add("Base Damage +6 with Heavy Blade");
			this.inputs.Add("Base Damage +6 with Light Blade");
			this.inputs.Add("Base Damage +6 with Longbow");
			this.inputs.Add("Base Damage +6 with One-Handed Melee");
			this.inputs.Add("Base Damage +6 with Polearm");
			this.inputs.Add("Base Damage +6 with Ranged");
			this.inputs.Add("Base Damage +6 with Shortbow");
			this.inputs.Add("Base Damage +6 with Two-Handed Melee");
			this.inputs.Add("Base Damage +60 if Target is Flat-Footed");
			this.inputs.Add("Base Damage +7 with Axe");
			this.inputs.Add("Base Damage +7 with Hammer");
			this.inputs.Add("Base Damage +7 with Heavy Blade");
			this.inputs.Add("Base Damage +7 with Light Blade");
			this.inputs.Add("Base Damage +7 with Longbow");
			this.inputs.Add("Base Damage +7 with One-Handed Melee");
			this.inputs.Add("Base Damage +7 with Polearm");
			this.inputs.Add("Base Damage +7 with Ranged");
			this.inputs.Add("Base Damage +7 with Shortbow");
			this.inputs.Add("Base Damage +7 with Two-Handed Melee");
			this.inputs.Add("Base Damage +8");
			this.inputs.Add("Base Damage +8 with Axe");
			this.inputs.Add("Base Damage +8 with Hammer");
			this.inputs.Add("Base Damage +8 with Heavy Blade");
			this.inputs.Add("Base Damage +8 with Light Blade");
			this.inputs.Add("Base Damage +8 with Longbow");
			this.inputs.Add("Base Damage +8 with One-Handed Melee");
			this.inputs.Add("Base Damage +8 with Polearm");
			this.inputs.Add("Base Damage +8 with Ranged");
			this.inputs.Add("Base Damage +8 with Shortbow");
			this.inputs.Add("Base Damage +8 with Two-Handed Melee");
			this.inputs.Add("Base Damage +9 with Axe");
			this.inputs.Add("Base Damage +9 with Hammer");
			this.inputs.Add("Base Damage +9 with Heavy Blade");
			this.inputs.Add("Base Damage +9 with Light Blade");
			this.inputs.Add("Base Damage +9 with Longbow");
			this.inputs.Add("Base Damage +9 with One-Handed Melee");
			this.inputs.Add("Base Damage +9 with Polearm");
			this.inputs.Add("Base Damage +9 with Ranged");
			this.inputs.Add("Base Damage +9 with Shortbow");
			this.inputs.Add("Base Damage +9 with Two-Handed Melee");
			this.inputs.Add("Base Defense Bonus +10");
			this.inputs.Add("Base Defense Bonus +11");
			this.inputs.Add("Base Defense Bonus +12");
			this.inputs.Add("Base Defense Bonus +13");
			this.inputs.Add("Base Defense Bonus +14");
			this.inputs.Add("Base Defense Bonus +15");
			this.inputs.Add("Base Defense Bonus +16");
			this.inputs.Add("Base Defense Bonus +17");
			this.inputs.Add("Base Defense Bonus +18");
			this.inputs.Add("Base Defense Bonus +19");
			this.inputs.Add("Base Defense Bonus +2");
			this.inputs.Add("Base Defense Bonus +20");
			this.inputs.Add("Base Defense Bonus +21");
			this.inputs.Add("Base Defense Bonus +22");
			this.inputs.Add("Base Defense Bonus +23");
			this.inputs.Add("Base Defense Bonus +24");
			this.inputs.Add("Base Defense Bonus +25");
			this.inputs.Add("Base Defense Bonus +26");
			this.inputs.Add("Base Defense Bonus +28");
			this.inputs.Add("Base Defense Bonus +30");
			this.inputs.Add("Base Defense Bonus +4");
			this.inputs.Add("Base Defense Bonus +5");
			this.inputs.Add("Base Defense Bonus +6");
			this.inputs.Add("Base Defense Bonus +7");
			this.inputs.Add("Base Defense Bonus +8");
			this.inputs.Add("Base Defense Bonus +9");
			this.inputs.Add("Beneficial");
			this.inputs.Add("Bleeding 10");
			this.inputs.Add("Bleeding 100");
			this.inputs.Add("Bleeding 100 if Target is Disrupted");
			this.inputs.Add("Bleeding 100 if Target is Flat-Footed");
			this.inputs.Add("Bleeding 12");
			this.inputs.Add("Bleeding 12 if Target has Flat-Footed");
			this.inputs.Add("Bleeding 15 if Target has Flat-Footed");
			this.inputs.Add("Bleeding 16 if Target is Flat-Footed");
			this.inputs.Add("Bleeding 18 if Target has Flat-Footed");
			this.inputs.Add("Bleeding 20");
			this.inputs.Add("Bleeding 20 if Target has Opportunity");
			this.inputs.Add("Bleeding 20 if Target has Unbalanced");
			this.inputs.Add("Bleeding 20 if Target is Flat-Footed");
			this.inputs.Add("Bleeding 21 if Target has Flat-Footed");
			this.inputs.Add("Bleeding 25 if Target has Opportunity");
			this.inputs.Add("Bleeding 25 if Target is Flat-Footed");
			this.inputs.Add("Bleeding 25 to All");
			this.inputs.Add("Bleeding 27 if Target has Opportunity");
			this.inputs.Add("Bleeding 28 if Target has Opportunity");
			this.inputs.Add("Bleeding 30");
			this.inputs.Add("Bleeding 30 if Target has Opportunity");
			this.inputs.Add("Bleeding 30 if Target is Disrupted");
			this.inputs.Add("Bleeding 30 if Target is Distressed");
			this.inputs.Add("Bleeding 30 if Target is Flat-Footed");
			this.inputs.Add("Bleeding 30 to All Targets with Opportunity");
			this.inputs.Add("Bleeding 35 if Target has Opportunity");
			this.inputs.Add("Bleeding 40 if Target has Opportunity");
			this.inputs.Add("Bleeding 40 if Target is Dazed");
			this.inputs.Add("Bleeding 40 if Target is Distressed");
			this.inputs.Add("Bleeding 5");
			this.inputs.Add("Bleeding 50");
			this.inputs.Add("Bleeding 50 if Target has Opportunity");
			this.inputs.Add("Bleeding 50 if Target is Dazed");
			this.inputs.Add("Bleeding 60 if Target has Opportunity");
			this.inputs.Add("Bleeding 60 if Target is Flat-Footed");
			this.inputs.Add("Bleeding 70 if Target is Distressed");
			this.inputs.Add("Bleeding 70 if Target is Flat-Footed");
			this.inputs.Add("Bleeding 9 if Target has Flat-Footed");
			this.inputs.Add("Bleeding Recovery Bonus +1");
			this.inputs.Add("Bleeding Recovery Bonus +10");
			this.inputs.Add("Bleeding Recovery Bonus +2");
			this.inputs.Add("Bleeding Recovery Bonus +3");
			this.inputs.Add("Bleeding Recovery Bonus +4");
			this.inputs.Add("Bleeding Recovery Bonus +5");
			this.inputs.Add("Bleeding Recovery Bonus +6");
			this.inputs.Add("Bleeding Recovery Bonus +7");
			this.inputs.Add("Bleeding Recovery Bonus +8");
			this.inputs.Add("Bleeding Recovery Bonus +9");
			this.inputs.Add("Bluff +10");
			this.inputs.Add("Bluff +100");
			this.inputs.Add("Bluff +110");
			this.inputs.Add("Bluff +120");
			this.inputs.Add("Bluff +130");
			this.inputs.Add("Bluff +140");
			this.inputs.Add("Bluff +150");
			this.inputs.Add("Bluff +160");
			this.inputs.Add("Bluff +170");
			this.inputs.Add("Bluff +180");
			this.inputs.Add("Bluff +190");
			this.inputs.Add("Bluff +20");
			this.inputs.Add("Bluff +200");
			this.inputs.Add("Bluff +30");
			this.inputs.Add("Bluff +40");
			this.inputs.Add("Bluff +50");
			this.inputs.Add("Bluff +60");
			this.inputs.Add("Bluff +70");
			this.inputs.Add("Bluff +80");
			this.inputs.Add("Bluff +90");
			this.inputs.Add("Bowyer +10");
			this.inputs.Add("Bowyer +100");
			this.inputs.Add("Bowyer +11");
			this.inputs.Add("Bowyer +110");
			this.inputs.Add("Bowyer +12");
			this.inputs.Add("Bowyer +120");
			this.inputs.Add("Bowyer +13");
			this.inputs.Add("Bowyer +130");
			this.inputs.Add("Bowyer +14");
			this.inputs.Add("Bowyer +140");
			this.inputs.Add("Bowyer +15");
			this.inputs.Add("Bowyer +150");
			this.inputs.Add("Bowyer +160");
			this.inputs.Add("Bowyer +170");
			this.inputs.Add("Bowyer +180");
			this.inputs.Add("Bowyer +190");
			this.inputs.Add("Bowyer +2");
			this.inputs.Add("Bowyer +20");
			this.inputs.Add("Bowyer +200");
			this.inputs.Add("Bowyer +30");
			this.inputs.Add("Bowyer +40");
			this.inputs.Add("Bowyer +5");
			this.inputs.Add("Bowyer +50");
			this.inputs.Add("Bowyer +6");
			this.inputs.Add("Bowyer +60");
			this.inputs.Add("Bowyer +7");
			this.inputs.Add("Bowyer +70");
			this.inputs.Add("Bowyer +8");
			this.inputs.Add("Bowyer +80");
			this.inputs.Add("Bowyer +9");
			this.inputs.Add("Bowyer +90");
			this.inputs.Add("Burning 10");
			this.inputs.Add("Burning 10 to All");
			this.inputs.Add("Burning 11 on Critical Hit");
			this.inputs.Add("Burning 13 on Critical Hit");
			this.inputs.Add("Burning 15");
			this.inputs.Add("Burning 15 on Critical Hit");
			this.inputs.Add("Burning 15 to All");
			this.inputs.Add("Burning 17 on Critical Hit");
			this.inputs.Add("Burning 19 on Critical Hit");
			this.inputs.Add("Burning 20");
			this.inputs.Add("Burning 20 to All");
			this.inputs.Add("Burning 21 on Critical Hit");
			this.inputs.Add("Burning 23 on Critical Hit");
			this.inputs.Add("Burning 25 on Critical Hit");
			this.inputs.Add("Burning 25 to All");
			this.inputs.Add("Burning 25 to All Targets with Burning");
			this.inputs.Add("Burning 30 to All");
			this.inputs.Add("Burning 40");
			this.inputs.Add("Burning 40 to All");
			this.inputs.Add("Burning 5");
			this.inputs.Add("Burning 5 on Critical Hit");
			this.inputs.Add("Burning 5 to All");
			this.inputs.Add("Burning 50");
			this.inputs.Add("Burning 50 to All");
			this.inputs.Add("Burning 50 to All Targets with Disrupted");
			this.inputs.Add("Burning 60 to All");
			this.inputs.Add("Burning 7 on Critical Hit");
			this.inputs.Add("Burning 70 to All");
			this.inputs.Add("Burning 8 if Target is Disrupted");
			this.inputs.Add("Burning 9 on Critical Hit");
			this.inputs.Add("Burning Recovery Bonus +1");
			this.inputs.Add("Burning Recovery Bonus +10");
			this.inputs.Add("Burning Recovery Bonus +2");
			this.inputs.Add("Burning Recovery Bonus +3");
			this.inputs.Add("Burning Recovery Bonus +4");
			this.inputs.Add("Burning Recovery Bonus +5");
			this.inputs.Add("Burning Recovery Bonus +6");
			this.inputs.Add("Burning Recovery Bonus +7");
			this.inputs.Add("Burning Recovery Bonus +8");
			this.inputs.Add("Burning Recovery Bonus +9");
			this.inputs.Add("Burst");
			this.inputs.Add("Burst to Self");
			this.inputs.Add("Carpenter +10");
			this.inputs.Add("Carpenter +100");
			this.inputs.Add("Carpenter +110");
			this.inputs.Add("Carpenter +120");
			this.inputs.Add("Carpenter +130");
			this.inputs.Add("Carpenter +140");
			this.inputs.Add("Carpenter +150");
			this.inputs.Add("Carpenter +160");
			this.inputs.Add("Carpenter +170");
			this.inputs.Add("Carpenter +180");
			this.inputs.Add("Carpenter +190");
			this.inputs.Add("Carpenter +2");
			this.inputs.Add("Carpenter +20");
			this.inputs.Add("Carpenter +200");
			this.inputs.Add("Carpenter +30");
			this.inputs.Add("Carpenter +40");
			this.inputs.Add("Carpenter +50");
			this.inputs.Add("Carpenter +60");
			this.inputs.Add("Carpenter +70");
			this.inputs.Add("Carpenter +80");
			this.inputs.Add("Carpenter +90");
			this.inputs.Add("Charge (10 meters) to Self");
			this.inputs.Add("Charge (20 meters) to Self");
			this.inputs.Add("Cold Damage");
			this.inputs.Add("Cold Resistance +10");
			this.inputs.Add("Cold Resistance +12");
			this.inputs.Add("Cold Resistance +14");
			this.inputs.Add("Cold Resistance +16");
			this.inputs.Add("Cold Resistance +18");
			this.inputs.Add("Cold Resistance +20");
			this.inputs.Add("Cold Resistance +22");
			this.inputs.Add("Cold Resistance +24");
			this.inputs.Add("Cold Resistance +26");
			this.inputs.Add("Cold Resistance +28");
			this.inputs.Add("Cold Resistance +30");
			this.inputs.Add("Cold Resistant (10 Rounds) to Self");
			this.inputs.Add("Cold Resistant (12 Rounds)");
			this.inputs.Add("Cold Resistant (14 Rounds)");
			this.inputs.Add("Cold Resistant (15 Rounds) to Self");
			this.inputs.Add("Cold Resistant (18 Rounds) to Self");
			this.inputs.Add("Cold Resistant (2 Rounds)");
			this.inputs.Add("Cold Resistant (2 Rounds) to All");
			this.inputs.Add("Cold Resistant (26 Rounds)");
			this.inputs.Add("Cold Resistant (3 Rounds)");
			this.inputs.Add("Cold Resistant (37 Rounds) to Self");
			this.inputs.Add("Cold Resistant (4 Rounds) to Self");
			this.inputs.Add("Cold Resistant (45 Rounds)");
			this.inputs.Add("Cold Resistant (5 Rounds)");
			this.inputs.Add("Cold Resistant (5 Rounds, 30% Chance) to Self if Target has Slowed");
			this.inputs.Add("Cold Resistant (5 Rounds, 40% Chance) to Self if Target has Slowed");
			this.inputs.Add("Cold Resistant (5 Rounds, 55% Chance) to Self if Target has Slowed");
			this.inputs.Add("Cold Resistant (5 Rounds, 70% Chance) to Self if Target has Slowed");
			this.inputs.Add("Cold Resistant (5 Rounds, 85% Chance) to Self if Target has Slowed");
			this.inputs.Add("Cold Resistant (6 Rounds) to Self");
			this.inputs.Add("Cold Resistant (67 Rounds) to Self");
			this.inputs.Add("Cure 11%");
			this.inputs.Add("Cure 20%");
			this.inputs.Add("Cure 25% to All");
			this.inputs.Add("Dazed (1 Rounds)");
			this.inputs.Add("Dazed (1 Rounds) if Target has Opportunity");
			this.inputs.Add("Dazed (1 Rounds) to All");
			this.inputs.Add("Dazed (1 Rounds) to All Targets with Disrupted");
			this.inputs.Add("Dazed (1 Rounds, 25% Chance)");
			this.inputs.Add("Dazed (1 Rounds, 50% Chance) to All");
			this.inputs.Add("Dazed (1 Rounds, 75% Chance) to All");
			this.inputs.Add("Dazed (10 seconds) on Critical Hit");
			this.inputs.Add("Dazed (12 seconds) on Critical Hit");
			this.inputs.Add("Dazed (14 seconds) on Critical Hit");
			this.inputs.Add("Dazed (16 seconds) on Critical Hit");
			this.inputs.Add("Dazed (18 seconds) on Critical Hit");
			this.inputs.Add("Dazed (2 Rounds)");
			this.inputs.Add("Dazed (2 Rounds) if Attacker has Favored");
			this.inputs.Add("Dazed (2 Rounds) to All");
			this.inputs.Add("Dazed (20 seconds) on Critical Hit");
			this.inputs.Add("Dazed (22 seconds) on Critical Hit");
			this.inputs.Add("Dazed (24 seconds) on Critical Hit");
			this.inputs.Add("Dazed (26 seconds) on Critical Hit");
			this.inputs.Add("Dazed (3 Rounds)");
			this.inputs.Add("Dazed (3 Rounds) to All");
			this.inputs.Add("Dazed (4 Rounds)");
			this.inputs.Add("Dazed (4 Rounds) if Target is Disrupted");
			this.inputs.Add("Dazed (5 Rounds)");
			this.inputs.Add("Dazed (5 Rounds) to All");
			this.inputs.Add("Dazed (6 Rounds)");
			this.inputs.Add("Dazed (6 Rounds) if Target is Disrupted");
			this.inputs.Add("Dazed (6 seconds) on Critical Hit");
			this.inputs.Add("Dazed (8 seconds) on Critical Hit");
			this.inputs.Add("Defending (1 Rounds) to Self");
			this.inputs.Add("Defending (2 Rounds)");
			this.inputs.Add("Defending (2 Rounds) to Self");
			this.inputs.Add("Defending (27 Rounds) to Self");
			this.inputs.Add("Dispelling");
			this.inputs.Add("Dispelling (10% Chance)");
			this.inputs.Add("Dispelling (100% Chance) if Target has Flat-Footed");
			this.inputs.Add("Dispelling (14% Chance)");
			this.inputs.Add("Dispelling (18% Chance)");
			this.inputs.Add("Dispelling (22% Chance)");
			this.inputs.Add("Dispelling (25% Chance)");
			this.inputs.Add("Dispelling (26% Chance)");
			this.inputs.Add("Dispelling (30% Chance)");
			this.inputs.Add("Dispelling (34% Chance)");
			this.inputs.Add("Dispelling (38% Chance)");
			this.inputs.Add("Dispelling (42% Chance)");
			this.inputs.Add("Dispelling (46% Chance)");
			this.inputs.Add("Dispelling (50% Chance)");
			this.inputs.Add("Dispelling (50% Chance) if Target has Flat-Footed");
			this.inputs.Add("Dispelling (70% Chance) if Target has Flat-Footed");
			this.inputs.Add("Dispelling (90% Chance) if Target has Flat-Footed");
			this.inputs.Add("Dispelling if Target has Unbalanced");
			this.inputs.Add("Dispelling if Target is Disrupted");
			this.inputs.Add("Dispelling to All");
			this.inputs.Add("Distressed (1 Rounds)");
			this.inputs.Add("Distressed (1 Rounds) if Target is Flat-Footed");
			this.inputs.Add("Distressed (1 Rounds) to All");
			this.inputs.Add("Distressed (1 Rounds, 25% Chance)");
			this.inputs.Add("Distressed (1 Rounds, 25% Chance) to All");
			this.inputs.Add("Distressed (1 Rounds, 50% Chance)");
			this.inputs.Add("Distressed (1 Rounds, 50% Chance) to All");
			this.inputs.Add("Distressed (1 Rounds, 75% Chance)");
			this.inputs.Add("Distressed (2 Rounds)");
			this.inputs.Add("Distressed (2 Rounds) if Attacker has Favored");
			this.inputs.Add("Distressed (2 Rounds) if Target has Opportunity");
			this.inputs.Add("Distressed (2 Rounds) if Target is Disrupted");
			this.inputs.Add("Distressed (2 Rounds) if Target is Flat-Footed");
			this.inputs.Add("Distressed (2 Rounds, 50% Chance)");
			this.inputs.Add("Distressed (3 Rounds)");
			this.inputs.Add("Distressed (3 Rounds) if Target has Opportunity");
			this.inputs.Add("Distressed (4 Rounds)");
			this.inputs.Add("Distressed (5 Rounds)");
			this.inputs.Add("Distressed (6 Rounds) to All");
			this.inputs.Add("Divine Attack Bonus +11");
			this.inputs.Add("Divine Attack Bonus +12");
			this.inputs.Add("Divine Attack Bonus +13");
			this.inputs.Add("Divine Attack Bonus +15");
			this.inputs.Add("Divine Attack Bonus +16");
			this.inputs.Add("Divine Attack Bonus +17");
			this.inputs.Add("Divine Attack Bonus +20");
			this.inputs.Add("Divine Attack Bonus +24");
			this.inputs.Add("Divine Attack Bonus +28");
			this.inputs.Add("Divine Attack Bonus +32");
			this.inputs.Add("Divine Attack Bonus +36");
			this.inputs.Add("Divine Attack Bonus +4");
			this.inputs.Add("Divine Attack Bonus +40");
			this.inputs.Add("Divine Attack Bonus +7");
			this.inputs.Add("Divine Attack Bonus +8");
			this.inputs.Add("Divine Attack Bonus +9");
			this.inputs.Add("Dodging (1 Rounds) to Self");
			this.inputs.Add("Dodging (19 Rounds) to Self");
			this.inputs.Add("Dodging (2 Rounds) to All");
			this.inputs.Add("Dodging (2 Rounds) to Self if Attacker has Quickened");
			this.inputs.Add("Dodging (4 Rounds) to Self");
			this.inputs.Add("Dodging (5 Rounds) to Self");
			this.inputs.Add("Dodging (7 Rounds) to Self");
			this.inputs.Add("Dodging (8 Rounds) to Self");
			this.inputs.Add("Dowser +10");
			this.inputs.Add("Dowser +100");
			this.inputs.Add("Dowser +11");
			this.inputs.Add("Dowser +110");
			this.inputs.Add("Dowser +12");
			this.inputs.Add("Dowser +120");
			this.inputs.Add("Dowser +13");
			this.inputs.Add("Dowser +130");
			this.inputs.Add("Dowser +14");
			this.inputs.Add("Dowser +140");
			this.inputs.Add("Dowser +15");
			this.inputs.Add("Dowser +150");
			this.inputs.Add("Dowser +160");
			this.inputs.Add("Dowser +170");
			this.inputs.Add("Dowser +180");
			this.inputs.Add("Dowser +190");
			this.inputs.Add("Dowser +2");
			this.inputs.Add("Dowser +20");
			this.inputs.Add("Dowser +200");
			this.inputs.Add("Dowser +30");
			this.inputs.Add("Dowser +40");
			this.inputs.Add("Dowser +5");
			this.inputs.Add("Dowser +50");
			this.inputs.Add("Dowser +6");
			this.inputs.Add("Dowser +60");
			this.inputs.Add("Dowser +7");
			this.inputs.Add("Dowser +70");
			this.inputs.Add("Dowser +8");
			this.inputs.Add("Dowser +80");
			this.inputs.Add("Dowser +9");
			this.inputs.Add("Dowser +90");
			this.inputs.Add("Drained 10");
			this.inputs.Add("Drained 10 if Target is Disrupted");
			this.inputs.Add("Drained 10 on Critical Hit");
			this.inputs.Add("Drained 10 to All");
			this.inputs.Add("Drained 10 to All Targets with Disrupted");
			this.inputs.Add("Drained 100");
			this.inputs.Add("Drained 11 if Target has Flat-Footed");
			this.inputs.Add("Drained 11 on Critical Hit");
			this.inputs.Add("Drained 12 on Critical Hit");
			this.inputs.Add("Drained 13 on Critical Hit");
			this.inputs.Add("Drained 14 on Critical Hit");
			this.inputs.Add("Drained 15 if Target is Disrupted");
			this.inputs.Add("Drained 15 on Critical Hit");
			this.inputs.Add("Drained 15 to All");
			this.inputs.Add("Drained 2 if Target has Flat-Footed");
			this.inputs.Add("Drained 20 if Target is Disrupted");
			this.inputs.Add("Drained 20 to All");
			this.inputs.Add("Drained 20 to All Targets with Disrupted");
			this.inputs.Add("Drained 3 if Target has Flat-Footed");
			this.inputs.Add("Drained 30 if Target is Flat-Footed");
			this.inputs.Add("Drained 40");
			this.inputs.Add("Drained 40 if Target is Disrupted");
			this.inputs.Add("Drained 5 if Target has Flat-Footed");
			this.inputs.Add("Drained 5 on Critical Hit");
			this.inputs.Add("Drained 6 on Critical Hit");
			this.inputs.Add("Drained 60");
			this.inputs.Add("Drained 7 on Critical Hit");
			this.inputs.Add("Drained 70 to All");
			this.inputs.Add("Drained 8 if Target has Flat-Footed");
			this.inputs.Add("Drained 8 on Critical Hit");
			this.inputs.Add("Drained 80 to All Targets with Disrupted");
			this.inputs.Add("Drained 9 on Critical Hit");
			this.inputs.Add("Drained 90");
			this.inputs.Add("Drained Recovery Bonus +1");
			this.inputs.Add("Drained Recovery Bonus +10");
			this.inputs.Add("Drained Recovery Bonus +2");
			this.inputs.Add("Drained Recovery Bonus +3");
			this.inputs.Add("Drained Recovery Bonus +4");
			this.inputs.Add("Drained Recovery Bonus +5");
			this.inputs.Add("Drained Recovery Bonus +6");
			this.inputs.Add("Drained Recovery Bonus +7");
			this.inputs.Add("Drained Recovery Bonus +8");
			this.inputs.Add("Drained Recovery Bonus +9");
			this.inputs.Add("Dungeoneering +10");
			this.inputs.Add("Dungeoneering +100");
			this.inputs.Add("Dungeoneering +11");
			this.inputs.Add("Dungeoneering +110");
			this.inputs.Add("Dungeoneering +12");
			this.inputs.Add("Dungeoneering +120");
			this.inputs.Add("Dungeoneering +13");
			this.inputs.Add("Dungeoneering +130");
			this.inputs.Add("Dungeoneering +14");
			this.inputs.Add("Dungeoneering +140");
			this.inputs.Add("Dungeoneering +15");
			this.inputs.Add("Dungeoneering +150");
			this.inputs.Add("Dungeoneering +16");
			this.inputs.Add("Dungeoneering +160");
			this.inputs.Add("Dungeoneering +170");
			this.inputs.Add("Dungeoneering +180");
			this.inputs.Add("Dungeoneering +190");
			this.inputs.Add("Dungeoneering +20");
			this.inputs.Add("Dungeoneering +200");
			this.inputs.Add("Dungeoneering +24");
			this.inputs.Add("Dungeoneering +28");
			this.inputs.Add("Dungeoneering +30");
			this.inputs.Add("Dungeoneering +4");
			this.inputs.Add("Dungeoneering +40");
			this.inputs.Add("Dungeoneering +5");
			this.inputs.Add("Dungeoneering +50");
			this.inputs.Add("Dungeoneering +6");
			this.inputs.Add("Dungeoneering +60");
			this.inputs.Add("Dungeoneering +7");
			this.inputs.Add("Dungeoneering +70");
			this.inputs.Add("Dungeoneering +8");
			this.inputs.Add("Dungeoneering +80");
			this.inputs.Add("Dungeoneering +9");
			this.inputs.Add("Dungeoneering +90");
			this.inputs.Add("Electric Damage");
			this.inputs.Add("Electric Resistance +10");
			this.inputs.Add("Electric Resistance +12");
			this.inputs.Add("Electric Resistance +14");
			this.inputs.Add("Electric Resistance +16");
			this.inputs.Add("Electric Resistance +18");
			this.inputs.Add("Electric Resistance +20");
			this.inputs.Add("Electric Resistance +22");
			this.inputs.Add("Electric Resistance +24");
			this.inputs.Add("Electric Resistance +26");
			this.inputs.Add("Electric Resistance +28");
			this.inputs.Add("Electric Resistance +30");
			this.inputs.Add("Electric Resistant (10 Rounds) to Self");
			this.inputs.Add("Electric Resistant (12 Rounds)");
			this.inputs.Add("Electric Resistant (15 Rounds) to Self");
			this.inputs.Add("Electric Resistant (18 Rounds) to Self");
			this.inputs.Add("Electric Resistant (2 Rounds)");
			this.inputs.Add("Electric Resistant (2 Rounds) to All");
			this.inputs.Add("Electric Resistant (20 Rounds) to Self");
			this.inputs.Add("Electric Resistant (3 Rounds)");
			this.inputs.Add("Electric Resistant (37 Rounds) to Self");
			this.inputs.Add("Electric Resistant (4 Rounds) to Self");
			this.inputs.Add("Electric Resistant (44 Rounds) to Self");
			this.inputs.Add("Electric Resistant (5 Rounds)");
			this.inputs.Add("Electric Resistant (5 Rounds, 25% Chance) to Self if Target has Exhausted");
			this.inputs.Add("Electric Resistant (5 Rounds, 35% Chance) to Self if Target has Exhausted");
			this.inputs.Add("Electric Resistant (5 Rounds, 50% Chance) to Self if Target has Exhausted");
			this.inputs.Add("Electric Resistant (5 Rounds, 60% Chance) to Self if Target has Exhausted");
			this.inputs.Add("Electric Resistant (5 Rounds, 72% Chance) to Self if Target has Exhausted");
			this.inputs.Add("Electric Resistant (6 Rounds) to Self");
			this.inputs.Add("Electric Resistant (67 Rounds) to Self");
			this.inputs.Add("Electric Resistant (68 Rounds) to Self");
			this.inputs.Add("Empowered (16 Rounds) to Self");
			this.inputs.Add("Empowered (2 Rounds) to Self");
			this.inputs.Add("Empowered (5 Rounds) to All");
			this.inputs.Add("Empowered (6 Rounds)");
			this.inputs.Add("Empowered (7 Rounds) to All");
			this.inputs.Add("Encumbrance +1");
			this.inputs.Add("Encumbrance +10");
			this.inputs.Add("Encumbrance +11");
			this.inputs.Add("Encumbrance +12");
			this.inputs.Add("Encumbrance +14");
			this.inputs.Add("Encumbrance +2");
			this.inputs.Add("Encumbrance +20");
			this.inputs.Add("Encumbrance +25");
			this.inputs.Add("Encumbrance +3");
			this.inputs.Add("Encumbrance +30");
			this.inputs.Add("Encumbrance +4");
			this.inputs.Add("Encumbrance +40");
			this.inputs.Add("Encumbrance +5");
			this.inputs.Add("Encumbrance +50");
			this.inputs.Add("Encumbrance +6");
			this.inputs.Add("Encumbrance +8");
			this.inputs.Add("Enduring (12 Rounds) to All");
			this.inputs.Add("Enduring (13 Rounds) to All");
			this.inputs.Add("Enduring (14 Rounds)");
			this.inputs.Add("Enduring (16 Rounds)");
			this.inputs.Add("Enduring (21 Rounds) to Self");
			this.inputs.Add("Energy Resistances +1");
			this.inputs.Add("Energy Resistances +2");
			this.inputs.Add("Energy Resistances +3");
			this.inputs.Add("Energy Resistances +4");
			this.inputs.Add("Energy Resistances +5");
			this.inputs.Add("Energy Resistances +6");
			this.inputs.Add("Energy Resistances +7");
			this.inputs.Add("Engineer +10");
			this.inputs.Add("Engineer +100");
			this.inputs.Add("Engineer +11");
			this.inputs.Add("Engineer +110");
			this.inputs.Add("Engineer +12");
			this.inputs.Add("Engineer +120");
			this.inputs.Add("Engineer +13");
			this.inputs.Add("Engineer +130");
			this.inputs.Add("Engineer +14");
			this.inputs.Add("Engineer +140");
			this.inputs.Add("Engineer +15");
			this.inputs.Add("Engineer +150");
			this.inputs.Add("Engineer +160");
			this.inputs.Add("Engineer +170");
			this.inputs.Add("Engineer +180");
			this.inputs.Add("Engineer +190");
			this.inputs.Add("Engineer +2");
			this.inputs.Add("Engineer +20");
			this.inputs.Add("Engineer +200");
			this.inputs.Add("Engineer +30");
			this.inputs.Add("Engineer +40");
			this.inputs.Add("Engineer +5");
			this.inputs.Add("Engineer +50");
			this.inputs.Add("Engineer +6");
			this.inputs.Add("Engineer +60");
			this.inputs.Add("Engineer +7");
			this.inputs.Add("Engineer +70");
			this.inputs.Add("Engineer +8");
			this.inputs.Add("Engineer +80");
			this.inputs.Add("Engineer +9");
			this.inputs.Add("Engineer +90");
			this.inputs.Add("Evade (10 meters) to Self");
			this.inputs.Add("Evade (20 meters) to Self");
			this.inputs.Add("Evade (20 meters) to Self if Attacker has Quickened");
			this.inputs.Add("Exhausted 10 to All");
			this.inputs.Add("Exhausted 100");
			this.inputs.Add("Exhausted 100 if Target has Opportunity");
			this.inputs.Add("Exhausted 100 to All");
			this.inputs.Add("Exhausted 15 to All");
			this.inputs.Add("Exhausted 20");
			this.inputs.Add("Exhausted 20 if Target has Opportunity");
			this.inputs.Add("Exhausted 20 if Target has Unbalanced");
			this.inputs.Add("Exhausted 20 to All");
			this.inputs.Add("Exhausted 25");
			this.inputs.Add("Exhausted 25 if Target has Opportunity");
			this.inputs.Add("Exhausted 25 on Critical Hit");
			this.inputs.Add("Exhausted 35 if Target has Opportunity");
			this.inputs.Add("Exhausted 35 on Critical Hit");
			this.inputs.Add("Exhausted 40 if Target is Disrupted");
			this.inputs.Add("Exhausted 40 if Target is Distressed");
			this.inputs.Add("Exhausted 40 to All");
			this.inputs.Add("Exhausted 45 on Critical Hit");
			this.inputs.Add("Exhausted 5");
			this.inputs.Add("Exhausted 50");
			this.inputs.Add("Exhausted 50 if Target has Opportunity");
			this.inputs.Add("Exhausted 50 if Target has Unbalanced");
			this.inputs.Add("Exhausted 50 if Target is Dazed");
			this.inputs.Add("Exhausted 50 if Target is Flat-Footed");
			this.inputs.Add("Exhausted 50 to All Targets with Disrupted");
			this.inputs.Add("Exhausted 55 on Critical Hit");
			this.inputs.Add("Exhausted 60 if Target is Distressed");
			this.inputs.Add("Exhausted 60 to All");
			this.inputs.Add("Exhausted 65 on Critical Hit");
			this.inputs.Add("Exhausted 70");
			this.inputs.Add("Exhausted 70 if Target is Flat-Footed");
			this.inputs.Add("Exhausted 70 to All Targets with Disrupted");
			this.inputs.Add("Exhausted 80 if Target is Disrupted");
			this.inputs.Add("Exhausted 80 to All");
			this.inputs.Add("Exhausted Recovery Bonus +1");
			this.inputs.Add("Exhausted Recovery Bonus +10");
			this.inputs.Add("Exhausted Recovery Bonus +2");
			this.inputs.Add("Exhausted Recovery Bonus +3");
			this.inputs.Add("Exhausted Recovery Bonus +4");
			this.inputs.Add("Exhausted Recovery Bonus +5");
			this.inputs.Add("Exhausted Recovery Bonus +6");
			this.inputs.Add("Exhausted Recovery Bonus +7");
			this.inputs.Add("Exhausted Recovery Bonus +8");
			this.inputs.Add("Exhausted Recovery Bonus +9");
			this.inputs.Add("Fast Healing (11 Rounds)");
			this.inputs.Add("Fast Healing (12 Rounds) to All");
			this.inputs.Add("Fast Healing (13 Rounds) to All");
			this.inputs.Add("Fast Healing (14 Rounds)");
			this.inputs.Add("Fast Healing (14 Rounds) to Self");
			this.inputs.Add("Fast Healing (16 Rounds)");
			this.inputs.Add("Fast Healing (18 Rounds)");
			this.inputs.Add("Fast Healing (34 Rounds) to Self");
			this.inputs.Add("Fast Healing (4 Rounds)");
			this.inputs.Add("Fast Healing (44 Rounds) to Self");
			this.inputs.Add("Fast Healing (5 Rounds)");
			this.inputs.Add("Fast Healing (6 Rounds)");
			this.inputs.Add("Fast Healing (7 Rounds)");
			this.inputs.Add("Fast Healing (7 Rounds) to All");
			this.inputs.Add("Fast Healing (8 Rounds) to Self");
			this.inputs.Add("Fast Healing (9 Rounds)");
			this.inputs.Add("Fast Healing (9 Rounds) to Self");
			this.inputs.Add("Fatigued Recovery Bonus +1");
			this.inputs.Add("Fatigued Recovery Bonus +10");
			this.inputs.Add("Fatigued Recovery Bonus +2");
			this.inputs.Add("Fatigued Recovery Bonus +3");
			this.inputs.Add("Fatigued Recovery Bonus +4");
			this.inputs.Add("Fatigued Recovery Bonus +5");
			this.inputs.Add("Fatigued Recovery Bonus +6");
			this.inputs.Add("Fatigued Recovery Bonus +7");
			this.inputs.Add("Fatigued Recovery Bonus +8");
			this.inputs.Add("Fatigued Recovery Bonus +9");
			this.inputs.Add("Favored (10 Rounds) to Self");
			this.inputs.Add("Favored (14 Rounds) to All");
			this.inputs.Add("Favored (17 Rounds) to Self");
			this.inputs.Add("Favored (2 Rounds) to Self");
			this.inputs.Add("Favored (26 Rounds) to Self");
			this.inputs.Add("Favored (3 Rounds) to Self");
			this.inputs.Add("Favored (9 Rounds)");
			this.inputs.Add("Fire Damage");
			this.inputs.Add("Fire Resistance +1");
			this.inputs.Add("Fire Resistance +10");
			this.inputs.Add("Fire Resistance +12");
			this.inputs.Add("Fire Resistance +14");
			this.inputs.Add("Fire Resistance +16");
			this.inputs.Add("Fire Resistance +18");
			this.inputs.Add("Fire Resistance +2");
			this.inputs.Add("Fire Resistance +20");
			this.inputs.Add("Fire Resistance +22");
			this.inputs.Add("Fire Resistance +24");
			this.inputs.Add("Fire Resistance +26");
			this.inputs.Add("Fire Resistance +28");
			this.inputs.Add("Fire Resistance +3");
			this.inputs.Add("Fire Resistance +30");
			this.inputs.Add("Fire Resistance +4");
			this.inputs.Add("Fire Resistance +5");
			this.inputs.Add("Fire Resistant (1 Rounds) to Self");
			this.inputs.Add("Fire Resistant (1 Rounds) to Self if Attacker has Favored");
			this.inputs.Add("Fire Resistant (10 Rounds) to Self");
			this.inputs.Add("Fire Resistant (12 Rounds)");
			this.inputs.Add("Fire Resistant (14 Rounds)");
			this.inputs.Add("Fire Resistant (15 Rounds) to Self");
			this.inputs.Add("Fire Resistant (18 Rounds) to Self");
			this.inputs.Add("Fire Resistant (2 Rounds)");
			this.inputs.Add("Fire Resistant (2 Rounds) to All");
			this.inputs.Add("Fire Resistant (26 Rounds)");
			this.inputs.Add("Fire Resistant (3 Rounds)");
			this.inputs.Add("Fire Resistant (37 Rounds) to Self");
			this.inputs.Add("Fire Resistant (4 Rounds) to Self");
			this.inputs.Add("Fire Resistant (45 Rounds)");
			this.inputs.Add("Fire Resistant (5 Rounds)");
			this.inputs.Add("Fire Resistant (5 Rounds, 30% Chance) to Self if Target has Burning");
			this.inputs.Add("Fire Resistant (5 Rounds, 40% Chance) to Self if Target has Burning");
			this.inputs.Add("Fire Resistant (5 Rounds, 55% Chance) to Self if Target has Burning");
			this.inputs.Add("Fire Resistant (5 Rounds, 70% Chance) to Self if Target has Burning");
			this.inputs.Add("Fire Resistant (5 Rounds, 85% Chance) to Self if Target has Burning");
			this.inputs.Add("Fire Resistant (6 Rounds) to Self");
			this.inputs.Add("Fire Resistant (67 Rounds) to Self");
			this.inputs.Add("Flat-Footed (1 Round, 100% Chance) if Target has Opportunity");
			this.inputs.Add("Flat-Footed (1 Round, 40% Chance) if Target has Opportunity");
			this.inputs.Add("Flat-Footed (1 Round, 55% Chance) if Target has Opportunity");
			this.inputs.Add("Flat-Footed (1 Round, 70% Chance) if Target has Opportunity");
			this.inputs.Add("Flat-Footed (1 Round, 85% Chance) if Target has Opportunity");
			this.inputs.Add("Flat-Footed (1 Rounds, 25% Chance)");
			this.inputs.Add("Flat-Footed (1 Rounds, 50% Chance)");
			this.inputs.Add("Flat-Footed (2 Rounds)");
			this.inputs.Add("Flat-Footed (3 Rounds)");
			this.inputs.Add("Flat-Footed (4 Rounds)");
			this.inputs.Add("Force Damage");
			this.inputs.Add("Force Resistant (5 Rounds, 12% Chance) to Self if Target has Disrupted");
			this.inputs.Add("Force Resistant (5 Rounds, 18% Chance) to Self if Target has Disrupted");
			this.inputs.Add("Force Resistant (5 Rounds, 24% Chance) to Self if Target has Disrupted");
			this.inputs.Add("Force Resistant (5 Rounds, 30% Chance) to Self if Target has Disrupted");
			this.inputs.Add("Force Resistant (5 Rounds, 35% Chance) to Self if Target has Disrupted");
			this.inputs.Add("Forester +10");
			this.inputs.Add("Forester +100");
			this.inputs.Add("Forester +11");
			this.inputs.Add("Forester +110");
			this.inputs.Add("Forester +12");
			this.inputs.Add("Forester +120");
			this.inputs.Add("Forester +13");
			this.inputs.Add("Forester +130");
			this.inputs.Add("Forester +14");
			this.inputs.Add("Forester +140");
			this.inputs.Add("Forester +15");
			this.inputs.Add("Forester +150");
			this.inputs.Add("Forester +160");
			this.inputs.Add("Forester +170");
			this.inputs.Add("Forester +180");
			this.inputs.Add("Forester +190");
			this.inputs.Add("Forester +2");
			this.inputs.Add("Forester +20");
			this.inputs.Add("Forester +200");
			this.inputs.Add("Forester +30");
			this.inputs.Add("Forester +40");
			this.inputs.Add("Forester +5");
			this.inputs.Add("Forester +50");
			this.inputs.Add("Forester +6");
			this.inputs.Add("Forester +60");
			this.inputs.Add("Forester +7");
			this.inputs.Add("Forester +70");
			this.inputs.Add("Forester +8");
			this.inputs.Add("Forester +80");
			this.inputs.Add("Forester +9");
			this.inputs.Add("Forester +90");
			this.inputs.Add("Fortitude Defense Bonus +1");
			this.inputs.Add("Fortitude Defense Bonus +10");
			this.inputs.Add("Fortitude Defense Bonus +12");
			this.inputs.Add("Fortitude Defense Bonus +16");
			this.inputs.Add("Fortitude Defense Bonus +2");
			this.inputs.Add("Fortitude Defense Bonus +20");
			this.inputs.Add("Fortitude Defense Bonus +24");
			this.inputs.Add("Fortitude Defense Bonus +28");
			this.inputs.Add("Fortitude Defense Bonus +3");
			this.inputs.Add("Fortitude Defense Bonus +32");
			this.inputs.Add("Fortitude Defense Bonus +36");
			this.inputs.Add("Fortitude Defense Bonus +4");
			this.inputs.Add("Fortitude Defense Bonus +40");
			this.inputs.Add("Fortitude Defense Bonus +6");
			this.inputs.Add("Fortitude Defense Bonus +8");
			this.inputs.Add("Freedom 100 to Self");
			this.inputs.Add("Freedom 11 to self on Critical Hit");
			this.inputs.Add("Freedom 13 to self on Critical Hit");
			this.inputs.Add("Freedom 15 to Self");
			this.inputs.Add("Freedom 15 to self on Critical Hit");
			this.inputs.Add("Freedom 17 to self on Critical Hit");
			this.inputs.Add("Freedom 19 to self on Critical Hit");
			this.inputs.Add("Freedom 21 to self on Critical Hit");
			this.inputs.Add("Freedom 23 to self on Critical Hit");
			this.inputs.Add("Freedom 25 to self on Critical Hit");
			this.inputs.Add("Freedom 5 to self on Critical Hit");
			this.inputs.Add("Freedom 60 to Self");
			this.inputs.Add("Freedom 7 to self on Critical Hit");
			this.inputs.Add("Freedom 70");
			this.inputs.Add("Freedom 80 to Self");
			this.inputs.Add("Freedom 85 to Self");
			this.inputs.Add("Freedom 9 to self on Critical Hit");
			this.inputs.Add("Freedom Recovery Bonus -1");
			this.inputs.Add("Frightened 10");
			this.inputs.Add("Frightened 10 if Target is Dazed");
			this.inputs.Add("Frightened 10 on Critical Hit");
			this.inputs.Add("Frightened 10 to All");
			this.inputs.Add("Frightened 100 if Target is Dazed");
			this.inputs.Add("Frightened 100 if Target is Distressed");
			this.inputs.Add("Frightened 100 to All");
			this.inputs.Add("Frightened 11");
			this.inputs.Add("Frightened 11 on Critical Hit");
			this.inputs.Add("Frightened 12 on Critical Hit");
			this.inputs.Add("Frightened 13 on Critical Hit");
			this.inputs.Add("Frightened 14 on Critical Hit");
			this.inputs.Add("Frightened 15");
			this.inputs.Add("Frightened 15 on Critical Hit");
			this.inputs.Add("Frightened 15 to All");
			this.inputs.Add("Frightened 20");
			this.inputs.Add("Frightened 20 if Target has Opportunity");
			this.inputs.Add("Frightened 20 if Target has Unbalanced");
			this.inputs.Add("Frightened 20 if Target is Disrupted");
			this.inputs.Add("Frightened 20 if Target is Flat-Footed");
			this.inputs.Add("Frightened 20 to All");
			this.inputs.Add("Frightened 20 to All Targets with Disrupted");
			this.inputs.Add("Frightened 25 if Target is Disrupted");
			this.inputs.Add("Frightened 25 to All");
			this.inputs.Add("Frightened 30");
			this.inputs.Add("Frightened 30 if Target is Dazed");
			this.inputs.Add("Frightened 30 if Target is Flat-Footed");
			this.inputs.Add("Frightened 35");
			this.inputs.Add("Frightened 40 if Target is Dazed");
			this.inputs.Add("Frightened 40 if Target is Disrupted");
			this.inputs.Add("Frightened 40 to All");
			this.inputs.Add("Frightened 40 to All Targets with Dazed");
			this.inputs.Add("Frightened 5 on Critical Hit");
			this.inputs.Add("Frightened 5 to All");
			this.inputs.Add("Frightened 50 if Target is Flat-Footed");
			this.inputs.Add("Frightened 53");
			this.inputs.Add("Frightened 55");
			this.inputs.Add("Frightened 58");
			this.inputs.Add("Frightened 6 on Critical Hit");
			this.inputs.Add("Frightened 60");
			this.inputs.Add("Frightened 7 on Critical Hit");
			this.inputs.Add("Frightened 70 to All");
			this.inputs.Add("Frightened 75");
			this.inputs.Add("Frightened 8 on Critical Hit");
			this.inputs.Add("Frightened 80 if Target is Dazed");
			this.inputs.Add("Frightened 9 on Critical Hit");
			this.inputs.Add("Frightened 90 if Target is Dazed");
			this.inputs.Add("Frightened Recovery Bonus +1");
			this.inputs.Add("Frightened Recovery Bonus +10");
			this.inputs.Add("Frightened Recovery Bonus +2");
			this.inputs.Add("Frightened Recovery Bonus +3");
			this.inputs.Add("Frightened Recovery Bonus +4");
			this.inputs.Add("Frightened Recovery Bonus +5");
			this.inputs.Add("Frightened Recovery Bonus +6");
			this.inputs.Add("Frightened Recovery Bonus +7");
			this.inputs.Add("Frightened Recovery Bonus +8");
			this.inputs.Add("Frightened Recovery Bonus +9");
			this.inputs.Add("Gemcutter +10");
			this.inputs.Add("Gemcutter +100");
			this.inputs.Add("Gemcutter +11");
			this.inputs.Add("Gemcutter +110");
			this.inputs.Add("Gemcutter +12");
			this.inputs.Add("Gemcutter +120");
			this.inputs.Add("Gemcutter +13");
			this.inputs.Add("Gemcutter +130");
			this.inputs.Add("Gemcutter +14");
			this.inputs.Add("Gemcutter +140");
			this.inputs.Add("Gemcutter +15");
			this.inputs.Add("Gemcutter +150");
			this.inputs.Add("Gemcutter +160");
			this.inputs.Add("Gemcutter +170");
			this.inputs.Add("Gemcutter +180");
			this.inputs.Add("Gemcutter +190");
			this.inputs.Add("Gemcutter +2");
			this.inputs.Add("Gemcutter +20");
			this.inputs.Add("Gemcutter +200");
			this.inputs.Add("Gemcutter +30");
			this.inputs.Add("Gemcutter +40");
			this.inputs.Add("Gemcutter +5");
			this.inputs.Add("Gemcutter +50");
			this.inputs.Add("Gemcutter +6");
			this.inputs.Add("Gemcutter +60");
			this.inputs.Add("Gemcutter +7");
			this.inputs.Add("Gemcutter +70");
			this.inputs.Add("Gemcutter +8");
			this.inputs.Add("Gemcutter +80");
			this.inputs.Add("Gemcutter +9");
			this.inputs.Add("Gemcutter +90");
			this.inputs.Add("Geography +10");
			this.inputs.Add("Geography +100");
			this.inputs.Add("Geography +11");
			this.inputs.Add("Geography +110");
			this.inputs.Add("Geography +12");
			this.inputs.Add("Geography +120");
			this.inputs.Add("Geography +13");
			this.inputs.Add("Geography +130");
			this.inputs.Add("Geography +14");
			this.inputs.Add("Geography +140");
			this.inputs.Add("Geography +15");
			this.inputs.Add("Geography +150");
			this.inputs.Add("Geography +16");
			this.inputs.Add("Geography +160");
			this.inputs.Add("Geography +170");
			this.inputs.Add("Geography +180");
			this.inputs.Add("Geography +190");
			this.inputs.Add("Geography +2");
			this.inputs.Add("Geography +20");
			this.inputs.Add("Geography +200");
			this.inputs.Add("Geography +24");
			this.inputs.Add("Geography +28");
			this.inputs.Add("Geography +30");
			this.inputs.Add("Geography +4");
			this.inputs.Add("Geography +40");
			this.inputs.Add("Geography +5");
			this.inputs.Add("Geography +50");
			this.inputs.Add("Geography +6");
			this.inputs.Add("Geography +60");
			this.inputs.Add("Geography +7");
			this.inputs.Add("Geography +70");
			this.inputs.Add("Geography +8");
			this.inputs.Add("Geography +80");
			this.inputs.Add("Geography +9");
			this.inputs.Add("Geography +90");
			this.inputs.Add("Hasted (10 Rounds) to Self");
			this.inputs.Add("Hasted (12 Rounds) to Self");
			this.inputs.Add("Hasted (15 Rounds) to Self");
			this.inputs.Add("Hasted (18 Rounds) to Self");
			this.inputs.Add("Hasted (2 Rounds) to All");
			this.inputs.Add("Hasted (2 Rounds) to Self if Target is Disrupted");
			this.inputs.Add("Hasted (30 Rounds) to Self");
			this.inputs.Add("Hasted (4 Rounds) to Self");
			this.inputs.Add("Hasted (5 Rounds) to All");
			this.inputs.Add("Hasted (5 Rounds) to Self");
			this.inputs.Add("Hasted (7 Rounds) to Self");
			this.inputs.Add("Heal 1020");
			this.inputs.Add("Heal 1020 to Self");
			this.inputs.Add("Heal 1100");
			this.inputs.Add("Heal 1150 to All");
			this.inputs.Add("Heal 1160 to Self");
			this.inputs.Add("Heal 1350 to Self");
			this.inputs.Add("Heal 1470 to Self");
			this.inputs.Add("Heal 1600 to Self");
			this.inputs.Add("Heal 1670 to Self");
			this.inputs.Add("Heal 1700");
			this.inputs.Add("Heal 2200 to Self");
			this.inputs.Add("Heal 310 to All");
			this.inputs.Add("Heal 470");
			this.inputs.Add("Heal 470 to All");
			this.inputs.Add("Heal 650 to Self");
			this.inputs.Add("Heal 680");
			this.inputs.Add("Heal 775");
			this.inputs.Add("Heal 780 to Self");
			this.inputs.Add("Heal 800 to Self");
			this.inputs.Add("Heavy Melee Attack Bonus +10");
			this.inputs.Add("Heavy Melee Attack Bonus +11");
			this.inputs.Add("Heavy Melee Attack Bonus +12");
			this.inputs.Add("Heavy Melee Attack Bonus +13");
			this.inputs.Add("Heavy Melee Attack Bonus +14");
			this.inputs.Add("Heavy Melee Attack Bonus +15");
			this.inputs.Add("Heavy Melee Attack Bonus +16");
			this.inputs.Add("Heavy Melee Attack Bonus +17");
			this.inputs.Add("Heavy Melee Attack Bonus +18");
			this.inputs.Add("Heavy Melee Attack Bonus +20");
			this.inputs.Add("Heavy Melee Attack Bonus +22");
			this.inputs.Add("Heavy Melee Attack Bonus +24");
			this.inputs.Add("Heavy Melee Attack Bonus +26");
			this.inputs.Add("Heavy Melee Attack Bonus +28");
			this.inputs.Add("Heavy Melee Attack Bonus +30");
			this.inputs.Add("Heavy Melee Attack Bonus +32");
			this.inputs.Add("Heavy Melee Attack Bonus +36");
			this.inputs.Add("Heavy Melee Attack Bonus +4");
			this.inputs.Add("Heavy Melee Attack Bonus +40");
			this.inputs.Add("Heavy Melee Attack Bonus +7");
			this.inputs.Add("Heavy Melee Attack Bonus +8");
			this.inputs.Add("Heavy Melee Attack Bonus +9");
			this.inputs.Add("History +10");
			this.inputs.Add("History +100");
			this.inputs.Add("History +11");
			this.inputs.Add("History +110");
			this.inputs.Add("History +12");
			this.inputs.Add("History +120");
			this.inputs.Add("History +13");
			this.inputs.Add("History +130");
			this.inputs.Add("History +14");
			this.inputs.Add("History +140");
			this.inputs.Add("History +15");
			this.inputs.Add("History +150");
			this.inputs.Add("History +16");
			this.inputs.Add("History +160");
			this.inputs.Add("History +170");
			this.inputs.Add("History +180");
			this.inputs.Add("History +190");
			this.inputs.Add("History +2");
			this.inputs.Add("History +20");
			this.inputs.Add("History +200");
			this.inputs.Add("History +24");
			this.inputs.Add("History +28");
			this.inputs.Add("History +30");
			this.inputs.Add("History +4");
			this.inputs.Add("History +40");
			this.inputs.Add("History +5");
			this.inputs.Add("History +50");
			this.inputs.Add("History +6");
			this.inputs.Add("History +60");
			this.inputs.Add("History +7");
			this.inputs.Add("History +70");
			this.inputs.Add("History +8");
			this.inputs.Add("History +80");
			this.inputs.Add("History +9");
			this.inputs.Add("History +90");
			this.inputs.Add("Hit Points +10");
			this.inputs.Add("Hit Points +100");
			this.inputs.Add("Hit Points +105");
			this.inputs.Add("Hit Points +108");
			this.inputs.Add("Hit Points +110");
			this.inputs.Add("Hit Points +125");
			this.inputs.Add("Hit Points +15");
			this.inputs.Add("Hit Points +150");
			this.inputs.Add("Hit Points +175");
			this.inputs.Add("Hit Points +20");
			this.inputs.Add("Hit Points +200");
			this.inputs.Add("Hit Points +225");
			this.inputs.Add("Hit Points +25");
			this.inputs.Add("Hit Points +250");
			this.inputs.Add("Hit Points +275");
			this.inputs.Add("Hit Points +30");
			this.inputs.Add("Hit Points +300");
			this.inputs.Add("Hit Points +325");
			this.inputs.Add("Hit Points +35");
			this.inputs.Add("Hit Points +350");
			this.inputs.Add("Hit Points +375");
			this.inputs.Add("Hit Points +40");
			this.inputs.Add("Hit Points +400");
			this.inputs.Add("Hit Points +425");
			this.inputs.Add("Hit Points +45");
			this.inputs.Add("Hit Points +450");
			this.inputs.Add("Hit Points +475");
			this.inputs.Add("Hit Points +50");
			this.inputs.Add("Hit Points +500");
			this.inputs.Add("Hit Points +55");
			this.inputs.Add("Hit Points +60");
			this.inputs.Add("Hit Points +75");
			this.inputs.Add("Hit Points +80");
			this.inputs.Add("Hit Points +85");
			this.inputs.Add("Hit Points +86");
			this.inputs.Add("Hit Points +87");
			this.inputs.Add("Hit Points +90");
			this.inputs.Add("Hit Points +95");
			this.inputs.Add("Holy Damage");
			this.inputs.Add("Iconographer +10");
			this.inputs.Add("Iconographer +100");
			this.inputs.Add("Iconographer +11");
			this.inputs.Add("Iconographer +110");
			this.inputs.Add("Iconographer +12");
			this.inputs.Add("Iconographer +120");
			this.inputs.Add("Iconographer +13");
			this.inputs.Add("Iconographer +130");
			this.inputs.Add("Iconographer +14");
			this.inputs.Add("Iconographer +140");
			this.inputs.Add("Iconographer +15");
			this.inputs.Add("Iconographer +150");
			this.inputs.Add("Iconographer +160");
			this.inputs.Add("Iconographer +170");
			this.inputs.Add("Iconographer +180");
			this.inputs.Add("Iconographer +190");
			this.inputs.Add("Iconographer +2");
			this.inputs.Add("Iconographer +20");
			this.inputs.Add("Iconographer +200");
			this.inputs.Add("Iconographer +30");
			this.inputs.Add("Iconographer +40");
			this.inputs.Add("Iconographer +5");
			this.inputs.Add("Iconographer +50");
			this.inputs.Add("Iconographer +6");
			this.inputs.Add("Iconographer +60");
			this.inputs.Add("Iconographer +7");
			this.inputs.Add("Iconographer +70");
			this.inputs.Add("Iconographer +8");
			this.inputs.Add("Iconographer +80");
			this.inputs.Add("Iconographer +9");
			this.inputs.Add("Iconographer +90");
			this.inputs.Add("Immobilize (10 Seconds) to All");
			this.inputs.Add("Immobilize (12 Seconds)");
			this.inputs.Add("Immobilize (2 Seconds) if Attacker has Aiming");
			this.inputs.Add("Immobilize (2 Seconds) if Target has Opportunity");
			this.inputs.Add("Immobilize (2 Seconds) if Target has Unbalanced");
			this.inputs.Add("Immobilize (2 Seconds) if Target is Disrupted");
			this.inputs.Add("Immobilize (2 Seconds) if Target is Distressed");
			this.inputs.Add("Immobilize (2 Seconds) to All");
			this.inputs.Add("Immobilize (3 Seconds)");
			this.inputs.Add("Immobilize (3 Seconds) to All");
			this.inputs.Add("Immobilize (4 Seconds)");
			this.inputs.Add("Immobilize (4 Seconds) if Target has Opportunity");
			this.inputs.Add("Immobilize (4 Seconds) if Target is Disrupted");
			this.inputs.Add("Immobilize (4 Seconds) to All Targets with Disrupted");
			this.inputs.Add("Immobilize (4 Seconds) to All Targets with Opportunity");
			this.inputs.Add("Immobilize (5 Seconds)");
			this.inputs.Add("Immobilize (6 Seconds)");
			this.inputs.Add("Immobilize (6 Seconds) to All");
			this.inputs.Add("Immobilize (6 Seconds) to All Targets with Disrupted");
			this.inputs.Add("Immobilize (8 Seconds)");
			this.inputs.Add("Immobilize (9 Seconds)");
			this.inputs.Add("Improved Critical +10");
			this.inputs.Add("Improved Critical +11");
			this.inputs.Add("Improved Critical +11 with Axe");
			this.inputs.Add("Improved Critical +11 with Hammer");
			this.inputs.Add("Improved Critical +11 with Heavy Blade");
			this.inputs.Add("Improved Critical +11 with Light Blade");
			this.inputs.Add("Improved Critical +11 with Longbow");
			this.inputs.Add("Improved Critical +11 with One-Handed Melee");
			this.inputs.Add("Improved Critical +11 with Polearm");
			this.inputs.Add("Improved Critical +11 with Ranged");
			this.inputs.Add("Improved Critical +11 with Shortbow");
			this.inputs.Add("Improved Critical +11 with Two-Handed Melee");
			this.inputs.Add("Improved Critical +12");
			this.inputs.Add("Improved Critical +13 with Axe");
			this.inputs.Add("Improved Critical +13 with Hammer");
			this.inputs.Add("Improved Critical +13 with Heavy Blade");
			this.inputs.Add("Improved Critical +13 with Light Blade");
			this.inputs.Add("Improved Critical +13 with Longbow");
			this.inputs.Add("Improved Critical +13 with One-Handed Melee");
			this.inputs.Add("Improved Critical +13 with Polearm");
			this.inputs.Add("Improved Critical +13 with Ranged");
			this.inputs.Add("Improved Critical +13 with Shortbow");
			this.inputs.Add("Improved Critical +13 with Two-Handed Melee");
			this.inputs.Add("Improved Critical +14");
			this.inputs.Add("Improved Critical +15 with Axe");
			this.inputs.Add("Improved Critical +15 with Hammer");
			this.inputs.Add("Improved Critical +15 with Heavy Blade");
			this.inputs.Add("Improved Critical +15 with Light Blade");
			this.inputs.Add("Improved Critical +15 with Longbow");
			this.inputs.Add("Improved Critical +15 with One-Handed Melee");
			this.inputs.Add("Improved Critical +15 with Polearm");
			this.inputs.Add("Improved Critical +15 with Ranged");
			this.inputs.Add("Improved Critical +15 with Shortbow");
			this.inputs.Add("Improved Critical +15 with Two-Handed Melee");
			this.inputs.Add("Improved Critical +16");
			this.inputs.Add("Improved Critical +17");
			this.inputs.Add("Improved Critical +17 with Axe");
			this.inputs.Add("Improved Critical +17 with Hammer");
			this.inputs.Add("Improved Critical +17 with Heavy Blade");
			this.inputs.Add("Improved Critical +17 with Light Blade");
			this.inputs.Add("Improved Critical +17 with Longbow");
			this.inputs.Add("Improved Critical +17 with One-Handed Melee");
			this.inputs.Add("Improved Critical +17 with Polearm");
			this.inputs.Add("Improved Critical +17 with Ranged");
			this.inputs.Add("Improved Critical +17 with Shortbow");
			this.inputs.Add("Improved Critical +17 with Two-Handed Melee");
			this.inputs.Add("Improved Critical +18");
			this.inputs.Add("Improved Critical +19 with Axe");
			this.inputs.Add("Improved Critical +19 with Hammer");
			this.inputs.Add("Improved Critical +19 with Heavy Blade");
			this.inputs.Add("Improved Critical +19 with Light Blade");
			this.inputs.Add("Improved Critical +19 with Longbow");
			this.inputs.Add("Improved Critical +19 with One-Handed Melee");
			this.inputs.Add("Improved Critical +19 with Polearm");
			this.inputs.Add("Improved Critical +19 with Ranged");
			this.inputs.Add("Improved Critical +19 with Shortbow");
			this.inputs.Add("Improved Critical +19 with Two-Handed Melee");
			this.inputs.Add("Improved Critical +20");
			this.inputs.Add("Improved Critical +20 if Target is Dazed");
			this.inputs.Add("Improved Critical +20 with Opportunity");
			this.inputs.Add("Improved Critical +21 with Axe");
			this.inputs.Add("Improved Critical +21 with Hammer");
			this.inputs.Add("Improved Critical +21 with Heavy Blade");
			this.inputs.Add("Improved Critical +21 with Light Blade");
			this.inputs.Add("Improved Critical +21 with Longbow");
			this.inputs.Add("Improved Critical +21 with One-Handed Melee");
			this.inputs.Add("Improved Critical +21 with Polearm");
			this.inputs.Add("Improved Critical +21 with Ranged");
			this.inputs.Add("Improved Critical +21 with Shortbow");
			this.inputs.Add("Improved Critical +21 with Two-Handed Melee");
			this.inputs.Add("Improved Critical +22");
			this.inputs.Add("Improved Critical +23 with Axe");
			this.inputs.Add("Improved Critical +23 with Hammer");
			this.inputs.Add("Improved Critical +23 with Heavy Blade");
			this.inputs.Add("Improved Critical +23 with Light Blade");
			this.inputs.Add("Improved Critical +23 with Longbow");
			this.inputs.Add("Improved Critical +23 with One-Handed Melee");
			this.inputs.Add("Improved Critical +23 with Polearm");
			this.inputs.Add("Improved Critical +23 with Ranged");
			this.inputs.Add("Improved Critical +23 with Shortbow");
			this.inputs.Add("Improved Critical +23 with Two-Handed Melee");
			this.inputs.Add("Improved Critical +24");
			this.inputs.Add("Improved Critical +25");
			this.inputs.Add("Improved Critical +25 with Axe");
			this.inputs.Add("Improved Critical +25 with Hammer");
			this.inputs.Add("Improved Critical +25 with Heavy Blade");
			this.inputs.Add("Improved Critical +25 with Light Blade");
			this.inputs.Add("Improved Critical +25 with Longbow");
			this.inputs.Add("Improved Critical +25 with One-Handed Melee");
			this.inputs.Add("Improved Critical +25 with Polearm");
			this.inputs.Add("Improved Critical +25 with Ranged");
			this.inputs.Add("Improved Critical +25 with Shortbow");
			this.inputs.Add("Improved Critical +25 with Two-Handed Melee");
			this.inputs.Add("Improved Critical +26");
			this.inputs.Add("Improved Critical +28");
			this.inputs.Add("Improved Critical +30");
			this.inputs.Add("Improved Critical +30 if Target is Distressed");
			this.inputs.Add("Improved Critical +4");
			this.inputs.Add("Improved Critical +40");
			this.inputs.Add("Improved Critical +40 if Target is Dazed");
			this.inputs.Add("Improved Critical +40 if Target is Distressed");
			this.inputs.Add("Improved Critical +5");
			this.inputs.Add("Improved Critical +5 with Axe");
			this.inputs.Add("Improved Critical +5 with Hammer");
			this.inputs.Add("Improved Critical +5 with Heavy Blade");
			this.inputs.Add("Improved Critical +5 with Light Blade");
			this.inputs.Add("Improved Critical +5 with Longbow");
			this.inputs.Add("Improved Critical +5 with One-Handed Melee");
			this.inputs.Add("Improved Critical +5 with Polearm");
			this.inputs.Add("Improved Critical +5 with Ranged");
			this.inputs.Add("Improved Critical +5 with Shortbow");
			this.inputs.Add("Improved Critical +5 with Two-Handed Melee");
			this.inputs.Add("Improved Critical +50");
			this.inputs.Add("Improved Critical +50 if Target has Unbalanced");
			this.inputs.Add("Improved Critical +7 with Axe");
			this.inputs.Add("Improved Critical +7 with Hammer");
			this.inputs.Add("Improved Critical +7 with Heavy Blade");
			this.inputs.Add("Improved Critical +7 with Light Blade");
			this.inputs.Add("Improved Critical +7 with Longbow");
			this.inputs.Add("Improved Critical +7 with One-Handed Melee");
			this.inputs.Add("Improved Critical +7 with Polearm");
			this.inputs.Add("Improved Critical +7 with Ranged");
			this.inputs.Add("Improved Critical +7 with Shortbow");
			this.inputs.Add("Improved Critical +7 with Two-Handed Melee");
			this.inputs.Add("Improved Critical +8");
			this.inputs.Add("Improved Critical +9 with Axe");
			this.inputs.Add("Improved Critical +9 with Hammer");
			this.inputs.Add("Improved Critical +9 with Heavy Blade");
			this.inputs.Add("Improved Critical +9 with Light Blade");
			this.inputs.Add("Improved Critical +9 with Longbow");
			this.inputs.Add("Improved Critical +9 with One-Handed Melee");
			this.inputs.Add("Improved Critical +9 with Polearm");
			this.inputs.Add("Improved Critical +9 with Ranged");
			this.inputs.Add("Improved Critical +9 with Shortbow");
			this.inputs.Add("Improved Critical +9 with Two-Handed Melee");
			this.inputs.Add("Interrupt");
			this.inputs.Add("Interrupt (100% Chance) if Target has Opportunity");
			this.inputs.Add("Interrupt (25% Chance)");
			this.inputs.Add("Interrupt (40% Chance) if Target has Opportunity");
			this.inputs.Add("Interrupt (50% Chance)");
			this.inputs.Add("Interrupt (50% Chance) to All");
			this.inputs.Add("Interrupt (55% Chance) if Target has Opportunity");
			this.inputs.Add("Interrupt (70% Chance) if Target has Opportunity");
			this.inputs.Add("Interrupt (85% Chance) if Target has Opportunity");
			this.inputs.Add("Interrupt if Target has Opportunity");
			this.inputs.Add("Interrupt if Target is Dazed");
			this.inputs.Add("Interrupt if Target is Disrupted");
			this.inputs.Add("Interrupt if Target is Distressed");
			this.inputs.Add("Interrupt if Target is Flat-Footed");
			this.inputs.Add("Jeweler +10");
			this.inputs.Add("Jeweler +100");
			this.inputs.Add("Jeweler +11");
			this.inputs.Add("Jeweler +110");
			this.inputs.Add("Jeweler +12");
			this.inputs.Add("Jeweler +120");
			this.inputs.Add("Jeweler +13");
			this.inputs.Add("Jeweler +130");
			this.inputs.Add("Jeweler +14");
			this.inputs.Add("Jeweler +140");
			this.inputs.Add("Jeweler +15");
			this.inputs.Add("Jeweler +150");
			this.inputs.Add("Jeweler +160");
			this.inputs.Add("Jeweler +170");
			this.inputs.Add("Jeweler +180");
			this.inputs.Add("Jeweler +190");
			this.inputs.Add("Jeweler +2");
			this.inputs.Add("Jeweler +20");
			this.inputs.Add("Jeweler +200");
			this.inputs.Add("Jeweler +30");
			this.inputs.Add("Jeweler +40");
			this.inputs.Add("Jeweler +5");
			this.inputs.Add("Jeweler +50");
			this.inputs.Add("Jeweler +6");
			this.inputs.Add("Jeweler +60");
			this.inputs.Add("Jeweler +7");
			this.inputs.Add("Jeweler +70");
			this.inputs.Add("Jeweler +8");
			this.inputs.Add("Jeweler +80");
			this.inputs.Add("Jeweler +9");
			this.inputs.Add("Jeweler +90");
			this.inputs.Add("Knockback (10 Meters)");
			this.inputs.Add("Knockback (10 Meters) if Target has Opportunity");
			this.inputs.Add("Knockback (10 Meters) if Target has Unbalanced");
			this.inputs.Add("Knockback (10 Meters) on Critical Hit");
			this.inputs.Add("Knockback (10 Meters) to All");
			this.inputs.Add("Knockback (-10 Meters) to All");
			this.inputs.Add("Knockback (10 Meters) to All Targets with Flat-Footed");
			this.inputs.Add("Knockback (20 Meters)");
			this.inputs.Add("Knockback (20 Meters) if Target has Unbalanced");
			this.inputs.Add("Knockback (3 Meters) if Target has Unbalanced");
			this.inputs.Add("Knockback (30 Meters) if Target is Distressed");
			this.inputs.Add("Knockback (-5 Meters)");
			this.inputs.Add("Knockdown (1 Seconds) to All");
			this.inputs.Add("Knockdown (2 Seconds) if Target has Unbalanced");
			this.inputs.Add("Knockdown (2 Seconds) if Target is Dazed");
			this.inputs.Add("Knockdown (2 Seconds) if Target is Distressed");
			this.inputs.Add("Knockdown (2 Seconds) to All Targets with Flat-Footed");
			this.inputs.Add("Knockdown (2 Seconds) to All Targets with Opportunity");
			this.inputs.Add("Knockdown (2 seconds, 20% Chance) if target has Opportunity");
			this.inputs.Add("Knockdown (2 Seconds, 25% Chance) to All");
			this.inputs.Add("Knockdown (2 seconds, 29% Chance) if target has Opportunity");
			this.inputs.Add("Knockdown (2 seconds, 38% Chance) if target has Opportunity");
			this.inputs.Add("Knockdown (2 seconds, 47% Chance) if target has Opportunity");
			this.inputs.Add("Knockdown (2 Seconds, 50% Chance) if Target has Unbalanced");
			this.inputs.Add("Knockdown (2 Seconds, 50% Chance) to All");
			this.inputs.Add("Knockdown (2 seconds, 56% Chance) if target has Opportunity");
			this.inputs.Add("Knockdown (3 Seconds) if Attacker has Strengthened");
			this.inputs.Add("Knockdown (3 Seconds) on Critical Hit");
			this.inputs.Add("Knockdown (3 Seconds) to All");
			this.inputs.Add("Knockdown (4 Seconds)");
			this.inputs.Add("Knockdown (4 Seconds) if Target has Unbalanced");
			this.inputs.Add("Leatherworker +10");
			this.inputs.Add("Leatherworker +100");
			this.inputs.Add("Leatherworker +11");
			this.inputs.Add("Leatherworker +110");
			this.inputs.Add("Leatherworker +12");
			this.inputs.Add("Leatherworker +120");
			this.inputs.Add("Leatherworker +13");
			this.inputs.Add("Leatherworker +130");
			this.inputs.Add("Leatherworker +14");
			this.inputs.Add("Leatherworker +140");
			this.inputs.Add("Leatherworker +15");
			this.inputs.Add("Leatherworker +150");
			this.inputs.Add("Leatherworker +160");
			this.inputs.Add("Leatherworker +170");
			this.inputs.Add("Leatherworker +180");
			this.inputs.Add("Leatherworker +190");
			this.inputs.Add("Leatherworker +2");
			this.inputs.Add("Leatherworker +20");
			this.inputs.Add("Leatherworker +200");
			this.inputs.Add("Leatherworker +30");
			this.inputs.Add("Leatherworker +40");
			this.inputs.Add("Leatherworker +5");
			this.inputs.Add("Leatherworker +50");
			this.inputs.Add("Leatherworker +6");
			this.inputs.Add("Leatherworker +60");
			this.inputs.Add("Leatherworker +7");
			this.inputs.Add("Leatherworker +70");
			this.inputs.Add("Leatherworker +8");
			this.inputs.Add("Leatherworker +80");
			this.inputs.Add("Leatherworker +9");
			this.inputs.Add("Leatherworker +90");
			this.inputs.Add("Light Melee Attack Bonus +11");
			this.inputs.Add("Light Melee Attack Bonus +12");
			this.inputs.Add("Light Melee Attack Bonus +13");
			this.inputs.Add("Light Melee Attack Bonus +15");
			this.inputs.Add("Light Melee Attack Bonus +16");
			this.inputs.Add("Light Melee Attack Bonus +17");
			this.inputs.Add("Light Melee Attack Bonus +20");
			this.inputs.Add("Light Melee Attack Bonus +24");
			this.inputs.Add("Light Melee Attack Bonus +28");
			this.inputs.Add("Light Melee Attack Bonus +30");
			this.inputs.Add("Light Melee Attack Bonus +32");
			this.inputs.Add("Light Melee Attack Bonus +36");
			this.inputs.Add("Light Melee Attack Bonus +4");
			this.inputs.Add("Light Melee Attack Bonus +40");
			this.inputs.Add("Light Melee Attack Bonus +7");
			this.inputs.Add("Light Melee Attack Bonus +8");
			this.inputs.Add("Light Melee Attack Bonus +9");
			this.inputs.Add("Local +10");
			this.inputs.Add("Local +100");
			this.inputs.Add("Local +11");
			this.inputs.Add("Local +110");
			this.inputs.Add("Local +12");
			this.inputs.Add("Local +120");
			this.inputs.Add("Local +13");
			this.inputs.Add("Local +130");
			this.inputs.Add("Local +14");
			this.inputs.Add("Local +140");
			this.inputs.Add("Local +15");
			this.inputs.Add("Local +150");
			this.inputs.Add("Local +16");
			this.inputs.Add("Local +160");
			this.inputs.Add("Local +170");
			this.inputs.Add("Local +180");
			this.inputs.Add("Local +190");
			this.inputs.Add("Local +2");
			this.inputs.Add("Local +20");
			this.inputs.Add("Local +200");
			this.inputs.Add("Local +24");
			this.inputs.Add("Local +28");
			this.inputs.Add("Local +30");
			this.inputs.Add("Local +4");
			this.inputs.Add("Local +40");
			this.inputs.Add("Local +5");
			this.inputs.Add("Local +50");
			this.inputs.Add("Local +6");
			this.inputs.Add("Local +60");
			this.inputs.Add("Local +7");
			this.inputs.Add("Local +70");
			this.inputs.Add("Local +8");
			this.inputs.Add("Local +80");
			this.inputs.Add("Local +9");
			this.inputs.Add("Local +90");
			this.inputs.Add("Long Blast");
			this.inputs.Add("Mighty (16 Rounds) to Self");
			this.inputs.Add("Mighty (20 Rounds) to All");
			this.inputs.Add("Mighty (21 Rounds) to All");
			this.inputs.Add("Mighty (24 Rounds)");
			this.inputs.Add("Mighty (26 Rounds) to Self");
			this.inputs.Add("Mighty (30 Rounds)");
			this.inputs.Add("Mighty (30 Rounds) to Self");
			this.inputs.Add("Mighty (4 Rounds) to Self if Target is Flat-Footed");
			this.inputs.Add("Mighty (7 Rounds) to All");
			this.inputs.Add("Mighty (9 Rounds) to Self");
			this.inputs.Add("Mind Blank 100 to Self");
			this.inputs.Add("Mind Blank 30 to Self");
			this.inputs.Add("Mind Blank 60");
			this.inputs.Add("Mind Blank 60 to Self");
			this.inputs.Add("Mind Blank 80 to Self");
			this.inputs.Add("Mind Blank 85 to Self");
			this.inputs.Add("Mind Blank Recovery Bonus -1");
			this.inputs.Add("Miner +10");
			this.inputs.Add("Miner +100");
			this.inputs.Add("Miner +11");
			this.inputs.Add("Miner +110");
			this.inputs.Add("Miner +12");
			this.inputs.Add("Miner +120");
			this.inputs.Add("Miner +13");
			this.inputs.Add("Miner +130");
			this.inputs.Add("Miner +14");
			this.inputs.Add("Miner +140");
			this.inputs.Add("Miner +15");
			this.inputs.Add("Miner +150");
			this.inputs.Add("Miner +160");
			this.inputs.Add("Miner +170");
			this.inputs.Add("Miner +180");
			this.inputs.Add("Miner +190");
			this.inputs.Add("Miner +2");
			this.inputs.Add("Miner +20");
			this.inputs.Add("Miner +200");
			this.inputs.Add("Miner +30");
			this.inputs.Add("Miner +40");
			this.inputs.Add("Miner +5");
			this.inputs.Add("Miner +50");
			this.inputs.Add("Miner +6");
			this.inputs.Add("Miner +60");
			this.inputs.Add("Miner +7");
			this.inputs.Add("Miner +70");
			this.inputs.Add("Miner +8");
			this.inputs.Add("Miner +80");
			this.inputs.Add("Miner +9");
			this.inputs.Add("Miner +90");
			this.inputs.Add("Nature +10");
			this.inputs.Add("Nature +100");
			this.inputs.Add("Nature +11");
			this.inputs.Add("Nature +110");
			this.inputs.Add("Nature +12");
			this.inputs.Add("Nature +120");
			this.inputs.Add("Nature +13");
			this.inputs.Add("Nature +130");
			this.inputs.Add("Nature +14");
			this.inputs.Add("Nature +140");
			this.inputs.Add("Nature +15");
			this.inputs.Add("Nature +150");
			this.inputs.Add("Nature +16");
			this.inputs.Add("Nature +160");
			this.inputs.Add("Nature +170");
			this.inputs.Add("Nature +180");
			this.inputs.Add("Nature +190");
			this.inputs.Add("Nature +2");
			this.inputs.Add("Nature +20");
			this.inputs.Add("Nature +200");
			this.inputs.Add("Nature +24");
			this.inputs.Add("Nature +28");
			this.inputs.Add("Nature +30");
			this.inputs.Add("Nature +4");
			this.inputs.Add("Nature +40");
			this.inputs.Add("Nature +5");
			this.inputs.Add("Nature +50");
			this.inputs.Add("Nature +6");
			this.inputs.Add("Nature +60");
			this.inputs.Add("Nature +7");
			this.inputs.Add("Nature +70");
			this.inputs.Add("Nature +8");
			this.inputs.Add("Nature +80");
			this.inputs.Add("Nature +9");
			this.inputs.Add("Nature +90");
			this.inputs.Add("Negative Damage");
			this.inputs.Add("Negative Resistant (14 Rounds) to Self");
			this.inputs.Add("Negative Resistant (18 Rounds) to All");
			this.inputs.Add("Negative Resistant (22 Rounds) to Self");
			this.inputs.Add("Negative Resistant (24 Rounds) to Self");
			this.inputs.Add("Negative Resistant (26 Rounds) to Self");
			this.inputs.Add("Negative Resistant (45 Rounds) to Self");
			this.inputs.Add("Negative Resistant (48 Rounds) to Self");
			this.inputs.Add("Negative Resistant (5 Rounds, 12% Chance) to Self if Target has Drained");
			this.inputs.Add("Negative Resistant (5 Rounds, 18% Chance) to Self if Target has Drained");
			this.inputs.Add("Negative Resistant (5 Rounds, 24% Chance) to Self if Target has Drained");
			this.inputs.Add("Negative Resistant (5 Rounds, 30% Chance) to Self if Target has Drained");
			this.inputs.Add("Negative Resistant (5 Rounds, 36% Chance) to Self if Target has Drained");
			this.inputs.Add("Negative Resistant (7 Rounds) to Self");
			this.inputs.Add("Negative Resistant (84 Rounds) to Self");
			this.inputs.Add("Negative Resistant (88 Rounds) to Self");
			this.inputs.Add("Oblivious 10");
			this.inputs.Add("Oblivious 10 if Target is Dazed");
			this.inputs.Add("Oblivious 10 if Target is Disrupted");
			this.inputs.Add("Oblivious 10 to All");
			this.inputs.Add("Oblivious 10 to All Targets with Disrupted");
			this.inputs.Add("Oblivious 10 to Self");
			this.inputs.Add("Oblivious 100");
			this.inputs.Add("Oblivious 100 to All");
			this.inputs.Add("Oblivious 11 if Target has Flat-Footed");
			this.inputs.Add("Oblivious 11 on Critical Hit");
			this.inputs.Add("Oblivious 13 on Critical Hit");
			this.inputs.Add("Oblivious 15");
			this.inputs.Add("Oblivious 15 on Critical Hit");
			this.inputs.Add("Oblivious 15 to All Targets with Disrupted");
			this.inputs.Add("Oblivious 16 if Target has Flat-Footed");
			this.inputs.Add("Oblivious 17 on Critical Hit");
			this.inputs.Add("Oblivious 18 on Critical Hit");
			this.inputs.Add("Oblivious 19 on Critical Hit");
			this.inputs.Add("Oblivious 20");
			this.inputs.Add("Oblivious 20 if Attacker has Riposting");
			this.inputs.Add("Oblivious 20 to All");
			this.inputs.Add("Oblivious 20 to All Targets with Disrupted");
			this.inputs.Add("Oblivious 21 if Target has Flat-Footed");
			this.inputs.Add("Oblivious 21 on Critical Hit");
			this.inputs.Add("Oblivious 23 on Critical Hit");
			this.inputs.Add("Oblivious 25");
			this.inputs.Add("Oblivious 25 on Critical Hit");
			this.inputs.Add("Oblivious 27 if Target has Flat-Footed");
			this.inputs.Add("Oblivious 27 on Critical Hit");
			this.inputs.Add("Oblivious 30");
			this.inputs.Add("Oblivious 30 if Target is Disrupted");
			this.inputs.Add("Oblivious 30 if Target is Flat-Footed");
			this.inputs.Add("Oblivious 30 to All");
			this.inputs.Add("Oblivious 30 to All Targets with Burning");
			this.inputs.Add("Oblivious 30 to All Targets with Disrupted");
			this.inputs.Add("Oblivious 36 on Critical Hit");
			this.inputs.Add("Oblivious 45 on Critical Hit");
			this.inputs.Add("Oblivious 5");
			this.inputs.Add("Oblivious 5 if Target has Flat-Footed");
			this.inputs.Add("Oblivious 5 on Critical Hit");
			this.inputs.Add("Oblivious 50");
			this.inputs.Add("Oblivious 50 if Target is Flat-Footed");
			this.inputs.Add("Oblivious 50 to All");
			this.inputs.Add("Oblivious 6 if Target is Disrupted");
			this.inputs.Add("Oblivious 60");
			this.inputs.Add("Oblivious 60 if Target is Disrupted");
			this.inputs.Add("Oblivious 60 to All");
			this.inputs.Add("Oblivious 65");
			this.inputs.Add("Oblivious 7 on Critical Hit");
			this.inputs.Add("Oblivious 70 if Target is Disrupted");
			this.inputs.Add("Oblivious 70 to All");
			this.inputs.Add("Oblivious 75 to All");
			this.inputs.Add("Oblivious 80");
			this.inputs.Add("Oblivious 80 to All");
			this.inputs.Add("Oblivious 85 to All Targets with Disrupted");
			this.inputs.Add("Oblivious 9 on Critical Hit");
			this.inputs.Add("Oblivious 90 to All");
			this.inputs.Add("Oblivious Recovery Bonus +1");
			this.inputs.Add("Oblivious Recovery Bonus +10");
			this.inputs.Add("Oblivious Recovery Bonus +2");
			this.inputs.Add("Oblivious Recovery Bonus +3");
			this.inputs.Add("Oblivious Recovery Bonus +4");
			this.inputs.Add("Oblivious Recovery Bonus +5");
			this.inputs.Add("Oblivious Recovery Bonus +6");
			this.inputs.Add("Oblivious Recovery Bonus +7");
			this.inputs.Add("Oblivious Recovery Bonus +8");
			this.inputs.Add("Oblivious Recovery Bonus +9");
			this.inputs.Add("Officer +10");
			this.inputs.Add("Officer +100");
			this.inputs.Add("Officer +110");
			this.inputs.Add("Officer +120");
			this.inputs.Add("Officer +130");
			this.inputs.Add("Officer +140");
			this.inputs.Add("Officer +150");
			this.inputs.Add("Officer +160");
			this.inputs.Add("Officer +170");
			this.inputs.Add("Officer +180");
			this.inputs.Add("Officer +190");
			this.inputs.Add("Officer +20");
			this.inputs.Add("Officer +200");
			this.inputs.Add("Officer +30");
			this.inputs.Add("Officer +40");
			this.inputs.Add("Officer +50");
			this.inputs.Add("Officer +60");
			this.inputs.Add("Officer +70");
			this.inputs.Add("Officer +80");
			this.inputs.Add("Officer +90");
			this.inputs.Add("Open (1 Round) to Self");
			this.inputs.Add("Opportunity (3 Rounds)");
			this.inputs.Add("Opportunity (4 Rounds)");
			this.inputs.Add("Parrying (1 Rounds) to Self");
			this.inputs.Add("Parrying (1 Rounds) to Self if Target has Opportunity");
			this.inputs.Add("Parrying (2 Rounds) to Self");
			this.inputs.Add("Parrying (2 Rounds) to Self if Attacker has Mighty");
			this.inputs.Add("Parrying (21 Rounds) to Self");
			this.inputs.Add("Parrying (3 Rounds) to Self");
			this.inputs.Add("Parrying (4 Rounds) to Self");
			this.inputs.Add("Penetrating");
			this.inputs.Add("Penetrating if Attacker has Replying");
			this.inputs.Add("Penetrating if Target has Unbalanced");
			this.inputs.Add("Penetrating if Target is Dazed");
			this.inputs.Add("Penetrating if Target is Distressed");
			this.inputs.Add("Penetrating if Target is Flat-Footed");
			this.inputs.Add("Penetrating with Flat-Footed");
			this.inputs.Add("Perception +10");
			this.inputs.Add("Perception +100");
			this.inputs.Add("Perception +11");
			this.inputs.Add("Perception +110");
			this.inputs.Add("Perception +12");
			this.inputs.Add("Perception +120");
			this.inputs.Add("Perception +13");
			this.inputs.Add("Perception +130");
			this.inputs.Add("Perception +14");
			this.inputs.Add("Perception +140");
			this.inputs.Add("Perception +15");
			this.inputs.Add("Perception +150");
			this.inputs.Add("Perception +16");
			this.inputs.Add("Perception +160");
			this.inputs.Add("Perception +17");
			this.inputs.Add("Perception +170");
			this.inputs.Add("Perception +18");
			this.inputs.Add("Perception +180");
			this.inputs.Add("Perception +190");
			this.inputs.Add("Perception +20");
			this.inputs.Add("Perception +200");
			this.inputs.Add("Perception +22");
			this.inputs.Add("Perception +24");
			this.inputs.Add("Perception +26");
			this.inputs.Add("Perception +28");
			this.inputs.Add("Perception +30");
			this.inputs.Add("Perception +4");
			this.inputs.Add("Perception +40");
			this.inputs.Add("Perception +5");
			this.inputs.Add("Perception +50");
			this.inputs.Add("Perception +60");
			this.inputs.Add("Perception +7");
			this.inputs.Add("Perception +70");
			this.inputs.Add("Perception +8");
			this.inputs.Add("Perception +80");
			this.inputs.Add("Perception +9");
			this.inputs.Add("Perception +90");
			this.inputs.Add("Physical Attuned (1 Rounds)");
			this.inputs.Add("Physical Attuned (17 Rounds) to Self");
			this.inputs.Add("Physical Attuned (3 Rounds)");
			this.inputs.Add("Physical Attuned (5 Rounds)");
			this.inputs.Add("Physical Damage");
			this.inputs.Add("Physical Resistance +1");
			this.inputs.Add("Physical Resistance +10");
			this.inputs.Add("Physical Resistance +12");
			this.inputs.Add("Physical Resistance +2");
			this.inputs.Add("Physical Resistance +3");
			this.inputs.Add("Physical Resistance +4");
			this.inputs.Add("Physical Resistance +5");
			this.inputs.Add("Physical Resistance +6");
			this.inputs.Add("Physical Resistance +7");
			this.inputs.Add("Physical Resistance +8");
			this.inputs.Add("Physical Resistance +9");
			this.inputs.Add("Physical Resistant (10 Rounds) to Self");
			this.inputs.Add("Physical Resistant (11 Rounds) to Self");
			this.inputs.Add("Physical Resistant (11 seconds) to self on Critical Hit");
			this.inputs.Add("Physical Resistant (13 seconds) to self on Critical Hit");
			this.inputs.Add("Physical Resistant (14 Rounds) to Self");
			this.inputs.Add("Physical Resistant (15 seconds) to self on Critical Hit");
			this.inputs.Add("Physical Resistant (17 seconds) to self on Critical Hit");
			this.inputs.Add("Physical Resistant (19 seconds) to self on Critical Hit");
			this.inputs.Add("Physical Resistant (2 Rounds)");
			this.inputs.Add("Physical Resistant (2 Rounds) to All");
			this.inputs.Add("Physical Resistant (2 Rounds) to Self");
			this.inputs.Add("Physical Resistant (2 Rounds) to Self if Attacker has Mighty");
			this.inputs.Add("Physical Resistant (2 Rounds, 30% Chance) to Self on Critical Hit");
			this.inputs.Add("Physical Resistant (2 Rounds, 45% Chance) to Self on Critical Hit");
			this.inputs.Add("Physical Resistant (2 Rounds, 60% Chance) to Self on Critical Hit");
			this.inputs.Add("Physical Resistant (2 Rounds, 75% Chance) to Self on Critical Hit");
			this.inputs.Add("Physical Resistant (2 Rounds, 90% Chance) to Self on Critical Hit");
			this.inputs.Add("Physical Resistant (21 seconds) to self on Critical Hit");
			this.inputs.Add("Physical Resistant (23 seconds) to self on Critical Hit");
			this.inputs.Add("Physical Resistant (25 seconds) to self on Critical Hit");
			this.inputs.Add("Physical Resistant (30 Rounds) to Self");
			this.inputs.Add("Physical Resistant (4 Rounds) to Self");
			this.inputs.Add("Physical Resistant (5 seconds) to self on Critical Hit");
			this.inputs.Add("Physical Resistant (6 Rounds) to Self");
			this.inputs.Add("Physical Resistant (7 seconds) to self on Critical Hit");
			this.inputs.Add("Physical Resistant (8 Rounds) to Self");
			this.inputs.Add("Physical Resistant (9 Rounds) to Self");
			this.inputs.Add("Physical Resistant (9 seconds) to self on Critical Hit");
			this.inputs.Add("Planes +10");
			this.inputs.Add("Planes +100");
			this.inputs.Add("Planes +11");
			this.inputs.Add("Planes +110");
			this.inputs.Add("Planes +12");
			this.inputs.Add("Planes +120");
			this.inputs.Add("Planes +13");
			this.inputs.Add("Planes +130");
			this.inputs.Add("Planes +14");
			this.inputs.Add("Planes +140");
			this.inputs.Add("Planes +15");
			this.inputs.Add("Planes +150");
			this.inputs.Add("Planes +16");
			this.inputs.Add("Planes +160");
			this.inputs.Add("Planes +170");
			this.inputs.Add("Planes +180");
			this.inputs.Add("Planes +190");
			this.inputs.Add("Planes +20");
			this.inputs.Add("Planes +200");
			this.inputs.Add("Planes +24");
			this.inputs.Add("Planes +28");
			this.inputs.Add("Planes +30");
			this.inputs.Add("Planes +4");
			this.inputs.Add("Planes +40");
			this.inputs.Add("Planes +5");
			this.inputs.Add("Planes +50");
			this.inputs.Add("Planes +6");
			this.inputs.Add("Planes +60");
			this.inputs.Add("Planes +7");
			this.inputs.Add("Planes +70");
			this.inputs.Add("Planes +8");
			this.inputs.Add("Planes +80");
			this.inputs.Add("Planes +9");
			this.inputs.Add("Planes +90");
			this.inputs.Add("Power +108");
			this.inputs.Add("Power +12");
			this.inputs.Add("Power +120");
			this.inputs.Add("Power +132");
			this.inputs.Add("Power +144");
			this.inputs.Add("Power +156");
			this.inputs.Add("Power +168");
			this.inputs.Add("Power +17");
			this.inputs.Add("Power +18");
			this.inputs.Add("Power +180");
			this.inputs.Add("Power +192");
			this.inputs.Add("Power +204");
			this.inputs.Add("Power +21");
			this.inputs.Add("Power +216");
			this.inputs.Add("Power +22");
			this.inputs.Add("Power +228");
			this.inputs.Add("Power +23");
			this.inputs.Add("Power +24");
			this.inputs.Add("Power +240");
			this.inputs.Add("Power +252");
			this.inputs.Add("Power +264");
			this.inputs.Add("Power +27");
			this.inputs.Add("Power +276");
			this.inputs.Add("Power +28");
			this.inputs.Add("Power +288");
			this.inputs.Add("Power +300");
			this.inputs.Add("Power +31");
			this.inputs.Add("Power +312");
			this.inputs.Add("Power +324");
			this.inputs.Add("Power +33");
			this.inputs.Add("Power +336");
			this.inputs.Add("Power +348");
			this.inputs.Add("Power +35");
			this.inputs.Add("Power +36");
			this.inputs.Add("Power +360");
			this.inputs.Add("Power +372");
			this.inputs.Add("Power +38");
			this.inputs.Add("Power +384");
			this.inputs.Add("Power +39");
			this.inputs.Add("Power +396");
			this.inputs.Add("Power +40");
			this.inputs.Add("Power +408");
			this.inputs.Add("Power +420");
			this.inputs.Add("Power +432");
			this.inputs.Add("Power +444");
			this.inputs.Add("Power +456");
			this.inputs.Add("Power +468");
			this.inputs.Add("Power +48");
			this.inputs.Add("Power +480");
			this.inputs.Add("Power +60");
			this.inputs.Add("Power +72");
			this.inputs.Add("Power +84");
			this.inputs.Add("Power +96");
			this.inputs.Add("Precise +10");
			this.inputs.Add("Precise +10 if Target is Flat-Footed");
			this.inputs.Add("Precise +11 with Axe");
			this.inputs.Add("Precise +11 with Hammer");
			this.inputs.Add("Precise +11 with Heavy Blade");
			this.inputs.Add("Precise +11 with Light Blade");
			this.inputs.Add("Precise +11 with Longbow");
			this.inputs.Add("Precise +11 with One-Handed Melee");
			this.inputs.Add("Precise +11 with Polearm");
			this.inputs.Add("Precise +11 with Ranged");
			this.inputs.Add("Precise +11 with Shortbow");
			this.inputs.Add("Precise +11 with Two-Handed Melee");
			this.inputs.Add("Precise +12 with Axe");
			this.inputs.Add("Precise +12 with Hammer");
			this.inputs.Add("Precise +12 with Heavy Blade");
			this.inputs.Add("Precise +12 with Light Blade");
			this.inputs.Add("Precise +12 with Longbow");
			this.inputs.Add("Precise +12 with One-Handed Melee");
			this.inputs.Add("Precise +12 with Polearm");
			this.inputs.Add("Precise +12 with Ranged");
			this.inputs.Add("Precise +12 with Shortbow");
			this.inputs.Add("Precise +12 with Two-Handed Melee");
			this.inputs.Add("Precise +14 with Axe");
			this.inputs.Add("Precise +14 with Hammer");
			this.inputs.Add("Precise +14 with Heavy Blade");
			this.inputs.Add("Precise +14 with Light Blade");
			this.inputs.Add("Precise +14 with Longbow");
			this.inputs.Add("Precise +14 with One-Handed Melee");
			this.inputs.Add("Precise +14 with Polearm");
			this.inputs.Add("Precise +14 with Ranged");
			this.inputs.Add("Precise +14 with Shortbow");
			this.inputs.Add("Precise +14 with Two-Handed Melee");
			this.inputs.Add("Precise +15 if Target has Opportunity");
			this.inputs.Add("Precise +15 if Target is Flat-Footed");
			this.inputs.Add("Precise +15 with Axe");
			this.inputs.Add("Precise +15 with Hammer");
			this.inputs.Add("Precise +15 with Heavy Blade");
			this.inputs.Add("Precise +15 with Light Blade");
			this.inputs.Add("Precise +15 with Longbow");
			this.inputs.Add("Precise +15 with One-Handed Melee");
			this.inputs.Add("Precise +15 with Polearm");
			this.inputs.Add("Precise +15 with Ranged");
			this.inputs.Add("Precise +15 with Shortbow");
			this.inputs.Add("Precise +15 with Two-Handed Melee");
			this.inputs.Add("Precise +17 with Axe");
			this.inputs.Add("Precise +17 with Hammer");
			this.inputs.Add("Precise +17 with Heavy Blade");
			this.inputs.Add("Precise +17 with Light Blade");
			this.inputs.Add("Precise +17 with Longbow");
			this.inputs.Add("Precise +17 with One-Handed Melee");
			this.inputs.Add("Precise +17 with Polearm");
			this.inputs.Add("Precise +17 with Ranged");
			this.inputs.Add("Precise +17 with Shortbow");
			this.inputs.Add("Precise +17 with Two-Handed Melee");
			this.inputs.Add("Precise +18 with Axe");
			this.inputs.Add("Precise +18 with Hammer");
			this.inputs.Add("Precise +18 with Heavy Blade");
			this.inputs.Add("Precise +18 with Light Blade");
			this.inputs.Add("Precise +18 with Longbow");
			this.inputs.Add("Precise +18 with One-Handed Melee");
			this.inputs.Add("Precise +18 with Polearm");
			this.inputs.Add("Precise +18 with Ranged");
			this.inputs.Add("Precise +18 with Shortbow");
			this.inputs.Add("Precise +18 with Two-Handed Melee");
			this.inputs.Add("Precise +20");
			this.inputs.Add("Precise +20 if Attacker has Favored");
			this.inputs.Add("Precise +20 if Attacker has Replying");
			this.inputs.Add("Precise +20 if Target has Opportunity");
			this.inputs.Add("Precise +20 if Target is Flat-Footed");
			this.inputs.Add("Precise +20 with Axe");
			this.inputs.Add("Precise +20 with Hammer");
			this.inputs.Add("Precise +20 with Heavy Blade");
			this.inputs.Add("Precise +20 with Light Blade");
			this.inputs.Add("Precise +20 with Longbow");
			this.inputs.Add("Precise +20 with One-Handed Melee");
			this.inputs.Add("Precise +20 with Polearm");
			this.inputs.Add("Precise +20 with Ranged");
			this.inputs.Add("Precise +20 with Shortbow");
			this.inputs.Add("Precise +20 with Two-Handed Melee");
			this.inputs.Add("Precise +25 if Target has Opportunity");
			this.inputs.Add("Precise +25 if Target is Flat-Footed");
			this.inputs.Add("Precise +30");
			this.inputs.Add("Precise +30 if Target has Opportunity");
			this.inputs.Add("Precise +30 if Target is Flat-Footed");
			this.inputs.Add("Precise +35 if Target has Opportunity");
			this.inputs.Add("Precise +35 if Target is Flat-Footed");
			this.inputs.Add("Precise +40");
			this.inputs.Add("Precise +40 if Target has Opportunity");
			this.inputs.Add("Precise +5");
			this.inputs.Add("Precise +5 with Axe");
			this.inputs.Add("Precise +5 with Hammer");
			this.inputs.Add("Precise +5 with Heavy Blade");
			this.inputs.Add("Precise +5 with Light Blade");
			this.inputs.Add("Precise +5 with Longbow");
			this.inputs.Add("Precise +5 with One-Handed Melee");
			this.inputs.Add("Precise +5 with Polearm");
			this.inputs.Add("Precise +5 with Ranged");
			this.inputs.Add("Precise +5 with Shortbow");
			this.inputs.Add("Precise +5 with Two-Handed Melee");
			this.inputs.Add("Precise +50 if Target has Opportunity");
			this.inputs.Add("Precise +55 if Target is Flat-Footed");
			this.inputs.Add("Precise +6 with Axe");
			this.inputs.Add("Precise +6 with Hammer");
			this.inputs.Add("Precise +6 with Heavy Blade");
			this.inputs.Add("Precise +6 with Light Blade");
			this.inputs.Add("Precise +6 with Longbow");
			this.inputs.Add("Precise +6 with One-Handed Melee");
			this.inputs.Add("Precise +6 with Polearm");
			this.inputs.Add("Precise +6 with Ranged");
			this.inputs.Add("Precise +6 with Shortbow");
			this.inputs.Add("Precise +6 with Two-Handed Melee");
			this.inputs.Add("Precise +60 if Target has Opportunity");
			this.inputs.Add("Precise +60 if Target is Flat-Footed");
			this.inputs.Add("Precise +8 with Axe");
			this.inputs.Add("Precise +8 with Hammer");
			this.inputs.Add("Precise +8 with Heavy Blade");
			this.inputs.Add("Precise +8 with Light Blade");
			this.inputs.Add("Precise +8 with Longbow");
			this.inputs.Add("Precise +8 with One-Handed Melee");
			this.inputs.Add("Precise +8 with Polearm");
			this.inputs.Add("Precise +8 with Ranged");
			this.inputs.Add("Precise +8 with Shortbow");
			this.inputs.Add("Precise +8 with Two-Handed Melee");
			this.inputs.Add("Precise +9 with Axe");
			this.inputs.Add("Precise +9 with Hammer");
			this.inputs.Add("Precise +9 with Heavy Blade");
			this.inputs.Add("Precise +9 with Light Blade");
			this.inputs.Add("Precise +9 with Longbow");
			this.inputs.Add("Precise +9 with One-Handed Melee");
			this.inputs.Add("Precise +9 with Polearm");
			this.inputs.Add("Precise +9 with Ranged");
			this.inputs.Add("Precise +9 with Shortbow");
			this.inputs.Add("Precise +9 with Two-Handed Melee");
			this.inputs.Add("Provokes Opportunity");
			this.inputs.Add("Psychic Attuned (28 Rounds) to Self");
			this.inputs.Add("Psychic Damage");
			this.inputs.Add("Psychic Resistance +1");
			this.inputs.Add("Psychic Resistance +10");
			this.inputs.Add("Psychic Resistance +2");
			this.inputs.Add("Psychic Resistance +3");
			this.inputs.Add("Psychic Resistance +4");
			this.inputs.Add("Psychic Resistance +5");
			this.inputs.Add("Psychic Resistance +6");
			this.inputs.Add("Psychic Resistance +7");
			this.inputs.Add("Psychic Resistance +8");
			this.inputs.Add("Psychic Resistance +9");
			this.inputs.Add("Psychic Resistant (30 Rounds) to Self");
			this.inputs.Add("Psychic Resistant (5 Rounds, 13% Chance) to Self if Target has Frightened");
			this.inputs.Add("Psychic Resistant (5 Rounds, 17% Chance) to Self if Target has Frightened");
			this.inputs.Add("Psychic Resistant (5 Rounds, 22% Chance) to Self if Target has Frightened");
			this.inputs.Add("Psychic Resistant (5 Rounds, 26% Chance) to Self if Target has Frightened");
			this.inputs.Add("Psychic Resistant (5 Rounds, 9% Chance) to Self if Target has Frightened");
			this.inputs.Add("Quickened (10 Rounds) to Self");
			this.inputs.Add("Quickened (17 Rounds) to Self");
			this.inputs.Add("Quickened (2 Rounds) to Self if Attacker has Favored");
			this.inputs.Add("Quickened (2 Rounds, 50% Chance) to Self");
			this.inputs.Add("Quickened (27 Rounds) to Self");
			this.inputs.Add("Quickened (3 Rounds)");
			this.inputs.Add("Quickened (4 Rounds) to Self");
			this.inputs.Add("Quickened (47 Rounds) to Self");
			this.inputs.Add("Quickened (5 Rounds)");
			this.inputs.Add("Quickened (7 Rounds) to Self");
			this.inputs.Add("Quickened (8 Rounds) to Self");
			this.inputs.Add("Quickened (9 Rounds) to Self");
			this.inputs.Add("Ranged Attack Bonus +11");
			this.inputs.Add("Ranged Attack Bonus +12");
			this.inputs.Add("Ranged Attack Bonus +13");
			this.inputs.Add("Ranged Attack Bonus +15");
			this.inputs.Add("Ranged Attack Bonus +16");
			this.inputs.Add("Ranged Attack Bonus +17");
			this.inputs.Add("Ranged Attack Bonus +20");
			this.inputs.Add("Ranged Attack Bonus +24");
			this.inputs.Add("Ranged Attack Bonus +28");
			this.inputs.Add("Ranged Attack Bonus +30");
			this.inputs.Add("Ranged Attack Bonus +32");
			this.inputs.Add("Ranged Attack Bonus +36");
			this.inputs.Add("Ranged Attack Bonus +4");
			this.inputs.Add("Ranged Attack Bonus +40");
			this.inputs.Add("Ranged Attack Bonus +7");
			this.inputs.Add("Ranged Attack Bonus +8");
			this.inputs.Add("Ranged Attack Bonus +9");
			this.inputs.Add("Razed 10");
			this.inputs.Add("Razed 10 to All");
			this.inputs.Add("Razed 100");
			this.inputs.Add("Razed 11 on Critical Hit");
			this.inputs.Add("Razed 13 on Critical Hit");
			this.inputs.Add("Razed 15 on Critical Hit");
			this.inputs.Add("Razed 15 to All Targets with Disrupted");
			this.inputs.Add("Razed 17 on Critical Hit");
			this.inputs.Add("Razed 19 on Critical Hit");
			this.inputs.Add("Razed 20");
			this.inputs.Add("Razed 20 to All");
			this.inputs.Add("Razed 21 on Critical Hit");
			this.inputs.Add("Razed 23 on Critical Hit");
			this.inputs.Add("Razed 25 on Critical Hit");
			this.inputs.Add("Razed 30");
			this.inputs.Add("Razed 30 if Target is Disrupted");
			this.inputs.Add("Razed 30 if Target is Distressed");
			this.inputs.Add("Razed 30 to All");
			this.inputs.Add("Razed 40");
			this.inputs.Add("Razed 40 if Target has Opportunity");
			this.inputs.Add("Razed 40 if Target is Distressed");
			this.inputs.Add("Razed 43 if Target has Opportunity");
			this.inputs.Add("Razed 5 on Critical Hit");
			this.inputs.Add("Razed 50");
			this.inputs.Add("Razed 50 to All");
			this.inputs.Add("Razed 60");
			this.inputs.Add("Razed 7 on Critical Hit");
			this.inputs.Add("Razed 75");
			this.inputs.Add("Razed 80");
			this.inputs.Add("Razed 9 on Critical Hit");
			this.inputs.Add("Razed Recovery Bonus +1");
			this.inputs.Add("Razed Recovery Bonus +10");
			this.inputs.Add("Razed Recovery Bonus +2");
			this.inputs.Add("Razed Recovery Bonus +3");
			this.inputs.Add("Razed Recovery Bonus +4");
			this.inputs.Add("Razed Recovery Bonus +5");
			this.inputs.Add("Razed Recovery Bonus +6");
			this.inputs.Add("Razed Recovery Bonus +7");
			this.inputs.Add("Razed Recovery Bonus +8");
			this.inputs.Add("Razed Recovery Bonus +9");
			this.inputs.Add("Reflex Defense Bonus +1");
			this.inputs.Add("Reflex Defense Bonus +10");
			this.inputs.Add("Reflex Defense Bonus +11");
			this.inputs.Add("Reflex Defense Bonus +12");
			this.inputs.Add("Reflex Defense Bonus +13");
			this.inputs.Add("Reflex Defense Bonus +14");
			this.inputs.Add("Reflex Defense Bonus +15");
			this.inputs.Add("Reflex Defense Bonus +16");
			this.inputs.Add("Reflex Defense Bonus +2");
			this.inputs.Add("Reflex Defense Bonus +20");
			this.inputs.Add("Reflex Defense Bonus +24");
			this.inputs.Add("Reflex Defense Bonus +28");
			this.inputs.Add("Reflex Defense Bonus +3");
			this.inputs.Add("Reflex Defense Bonus +32");
			this.inputs.Add("Reflex Defense Bonus +36");
			this.inputs.Add("Reflex Defense Bonus +4");
			this.inputs.Add("Reflex Defense Bonus +40");
			this.inputs.Add("Reflex Defense Bonus +5");
			this.inputs.Add("Reflex Defense Bonus +6");
			this.inputs.Add("Reflex Defense Bonus +7");
			this.inputs.Add("Reflex Defense Bonus +8");
			this.inputs.Add("Reflex Defense Bonus +9");
			this.inputs.Add("Refresh 1 to Self on Critical Hit");
			this.inputs.Add("Refresh 2 to Self on Critical Hit");
			this.inputs.Add("Refresh 3 to Self on Critical Hit");
			this.inputs.Add("Refresh 4 to Self on Critical Hit");
			this.inputs.Add("Refresh 5 to Self on Critical Hit");
			this.inputs.Add("Regenerating (10 Rounds) to Self");
			this.inputs.Add("Regenerating (13 Rounds)");
			this.inputs.Add("Regenerating (18 Rounds) to Self");
			this.inputs.Add("Regenerating (2 Rounds) to Self");
			this.inputs.Add("Regenerating (3 Rounds)");
			this.inputs.Add("Regenerating (4 Rounds) to Self");
			this.inputs.Add("Regenerating (5 Rounds) to Self");
			this.inputs.Add("Regenerating (6 Rounds)");
			this.inputs.Add("Regenerating (7 Rounds) to Self");
			this.inputs.Add("Regenerating (8 Rounds) to Self");
			this.inputs.Add("Regenerating (9 Rounds)");
			this.inputs.Add("Regenerating (9 Rounds) to Self");
			this.inputs.Add("Regeneration +1%");
			this.inputs.Add("Regeneration +2%");
			this.inputs.Add("Regeneration +3%");
			this.inputs.Add("Regeneration +4%");
			this.inputs.Add("Regeneration +5%");
			this.inputs.Add("Regeneration +6%");
			this.inputs.Add("Regeneration +7%");
			this.inputs.Add("Removes Open to Self");
			this.inputs.Add("Revealed (1 Seconds) if Attacker has Alert");
			this.inputs.Add("Revealed (10 Seconds) to All");
			this.inputs.Add("Revealed (16 Seconds) to All");
			this.inputs.Add("Revealed (31 Seconds) to All");
			this.inputs.Add("Revealed (35 Seconds) to All");
			this.inputs.Add("Revealed (57 Seconds) to All");
			this.inputs.Add("Riposting (2 Rounds) to All");
			this.inputs.Add("Riposting (27 Rounds) to Self");
			this.inputs.Add("Riposting (3 Rounds)");
			this.inputs.Add("Riposting (7 Rounds) to All");
			this.inputs.Add("Sage +10");
			this.inputs.Add("Sage +100");
			this.inputs.Add("Sage +11");
			this.inputs.Add("Sage +110");
			this.inputs.Add("Sage +12");
			this.inputs.Add("Sage +120");
			this.inputs.Add("Sage +13");
			this.inputs.Add("Sage +130");
			this.inputs.Add("Sage +14");
			this.inputs.Add("Sage +140");
			this.inputs.Add("Sage +15");
			this.inputs.Add("Sage +150");
			this.inputs.Add("Sage +160");
			this.inputs.Add("Sage +170");
			this.inputs.Add("Sage +180");
			this.inputs.Add("Sage +190");
			this.inputs.Add("Sage +2");
			this.inputs.Add("Sage +20");
			this.inputs.Add("Sage +200");
			this.inputs.Add("Sage +30");
			this.inputs.Add("Sage +40");
			this.inputs.Add("Sage +5");
			this.inputs.Add("Sage +50");
			this.inputs.Add("Sage +6");
			this.inputs.Add("Sage +60");
			this.inputs.Add("Sage +7");
			this.inputs.Add("Sage +70");
			this.inputs.Add("Sage +8");
			this.inputs.Add("Sage +80");
			this.inputs.Add("Sage +9");
			this.inputs.Add("Sage +90");
			this.inputs.Add("Sawyer +10");
			this.inputs.Add("Sawyer +100");
			this.inputs.Add("Sawyer +11");
			this.inputs.Add("Sawyer +110");
			this.inputs.Add("Sawyer +12");
			this.inputs.Add("Sawyer +120");
			this.inputs.Add("Sawyer +13");
			this.inputs.Add("Sawyer +130");
			this.inputs.Add("Sawyer +14");
			this.inputs.Add("Sawyer +140");
			this.inputs.Add("Sawyer +15");
			this.inputs.Add("Sawyer +150");
			this.inputs.Add("Sawyer +160");
			this.inputs.Add("Sawyer +170");
			this.inputs.Add("Sawyer +180");
			this.inputs.Add("Sawyer +190");
			this.inputs.Add("Sawyer +2");
			this.inputs.Add("Sawyer +20");
			this.inputs.Add("Sawyer +200");
			this.inputs.Add("Sawyer +30");
			this.inputs.Add("Sawyer +40");
			this.inputs.Add("Sawyer +5");
			this.inputs.Add("Sawyer +50");
			this.inputs.Add("Sawyer +6");
			this.inputs.Add("Sawyer +60");
			this.inputs.Add("Sawyer +7");
			this.inputs.Add("Sawyer +70");
			this.inputs.Add("Sawyer +8");
			this.inputs.Add("Sawyer +80");
			this.inputs.Add("Sawyer +9");
			this.inputs.Add("Sawyer +90");
			this.inputs.Add("Scavenger +10");
			this.inputs.Add("Scavenger +100");
			this.inputs.Add("Scavenger +11");
			this.inputs.Add("Scavenger +110");
			this.inputs.Add("Scavenger +12");
			this.inputs.Add("Scavenger +120");
			this.inputs.Add("Scavenger +13");
			this.inputs.Add("Scavenger +130");
			this.inputs.Add("Scavenger +14");
			this.inputs.Add("Scavenger +140");
			this.inputs.Add("Scavenger +15");
			this.inputs.Add("Scavenger +150");
			this.inputs.Add("Scavenger +160");
			this.inputs.Add("Scavenger +170");
			this.inputs.Add("Scavenger +180");
			this.inputs.Add("Scavenger +190");
			this.inputs.Add("Scavenger +2");
			this.inputs.Add("Scavenger +20");
			this.inputs.Add("Scavenger +200");
			this.inputs.Add("Scavenger +30");
			this.inputs.Add("Scavenger +40");
			this.inputs.Add("Scavenger +5");
			this.inputs.Add("Scavenger +50");
			this.inputs.Add("Scavenger +6");
			this.inputs.Add("Scavenger +60");
			this.inputs.Add("Scavenger +7");
			this.inputs.Add("Scavenger +70");
			this.inputs.Add("Scavenger +8");
			this.inputs.Add("Scavenger +80");
			this.inputs.Add("Scavenger +9");
			this.inputs.Add("Scavenger +90");
			this.inputs.Add("Seneschal +10");
			this.inputs.Add("Seneschal +100");
			this.inputs.Add("Seneschal +110");
			this.inputs.Add("Seneschal +120");
			this.inputs.Add("Seneschal +130");
			this.inputs.Add("Seneschal +140");
			this.inputs.Add("Seneschal +150");
			this.inputs.Add("Seneschal +160");
			this.inputs.Add("Seneschal +170");
			this.inputs.Add("Seneschal +180");
			this.inputs.Add("Seneschal +190");
			this.inputs.Add("Seneschal +2");
			this.inputs.Add("Seneschal +20");
			this.inputs.Add("Seneschal +200");
			this.inputs.Add("Seneschal +30");
			this.inputs.Add("Seneschal +40");
			this.inputs.Add("Seneschal +50");
			this.inputs.Add("Seneschal +60");
			this.inputs.Add("Seneschal +70");
			this.inputs.Add("Seneschal +80");
			this.inputs.Add("Seneschal +90");
			this.inputs.Add("Short Blast");
			this.inputs.Add("Short Blast Melee");
			this.inputs.Add("Shrug Off");
			this.inputs.Add("Shrug Off (50% Chance)");
			this.inputs.Add("Shrug Off to All");
			this.inputs.Add("Shrug Off to Self");
			this.inputs.Add("Slowed 10");
			this.inputs.Add("Slowed 10 to All");
			this.inputs.Add("Slowed 100");
			this.inputs.Add("Slowed 100 if Target is Disrupted");
			this.inputs.Add("Slowed 100 to All");
			this.inputs.Add("Slowed 100 to All Targets with Disrupted");
			this.inputs.Add("Slowed 11 on Critical Hit");
			this.inputs.Add("Slowed 12 if Target has Unbalanced");
			this.inputs.Add("Slowed 13 if Target has Flat-Footed");
			this.inputs.Add("Slowed 13 if Target has Opportunity");
			this.inputs.Add("Slowed 13 on Critical Hit");
			this.inputs.Add("Slowed 15");
			this.inputs.Add("Slowed 15 on Critical Hit");
			this.inputs.Add("Slowed 17 if Target has Opportunity");
			this.inputs.Add("Slowed 17 on Critical Hit");
			this.inputs.Add("Slowed 19 if Target has Flat-Footed");
			this.inputs.Add("Slowed 19 on Critical Hit");
			this.inputs.Add("Slowed 20");
			this.inputs.Add("Slowed 20 if Target has Unbalanced");
			this.inputs.Add("Slowed 20 if Target is Distressed");
			this.inputs.Add("Slowed 20 to All");
			this.inputs.Add("Slowed 20 to All Targets with Disrupted");
			this.inputs.Add("Slowed 20 to All Targets with Flat-Footed");
			this.inputs.Add("Slowed 21 on Critical Hit");
			this.inputs.Add("Slowed 23 if Target has Opportunity");
			this.inputs.Add("Slowed 23 on Critical Hit");
			this.inputs.Add("Slowed 25");
			this.inputs.Add("Slowed 25 if Target has Flat-Footed");
			this.inputs.Add("Slowed 25 if Target has Unbalanced");
			this.inputs.Add("Slowed 25 on Critical Hit");
			this.inputs.Add("Slowed 3 if Target has Opportunity");
			this.inputs.Add("Slowed 30");
			this.inputs.Add("Slowed 30 if Attacker has Dodging");
			this.inputs.Add("Slowed 30 if Attacker has Favored");
			this.inputs.Add("Slowed 30 to All");
			this.inputs.Add("Slowed 33 if Target has Flat-Footed");
			this.inputs.Add("Slowed 35 on Critical Hit");
			this.inputs.Add("Slowed 35 to All Targets with Opportunity");
			this.inputs.Add("Slowed 40 if Target is Distressed");
			this.inputs.Add("Slowed 40 to All");
			this.inputs.Add("Slowed 40 to All Targets with Disrupted");
			this.inputs.Add("Slowed 40 to All Targets with Opportunity");
			this.inputs.Add("Slowed 45 on Critical Hit");
			this.inputs.Add("Slowed 5");
			this.inputs.Add("Slowed 5 if Target has Unbalanced");
			this.inputs.Add("Slowed 5 on Critical Hit");
			this.inputs.Add("Slowed 5 to All");
			this.inputs.Add("Slowed 50");
			this.inputs.Add("Slowed 50 if Target has Opportunity");
			this.inputs.Add("Slowed 50 if Target is Distressed");
			this.inputs.Add("Slowed 50 if Target is Flat-Footed");
			this.inputs.Add("Slowed 50 to All");
			this.inputs.Add("Slowed 50 to All Targets with Disrupted");
			this.inputs.Add("Slowed 50 to All Targets with Opportunity");
			this.inputs.Add("Slowed 55");
			this.inputs.Add("Slowed 55 on Critical Hit");
			this.inputs.Add("Slowed 60 if Target has Opportunity");
			this.inputs.Add("Slowed 60 if Target is Distressed");
			this.inputs.Add("Slowed 60 to All");
			this.inputs.Add("Slowed 7 if Target has Flat-Footed");
			this.inputs.Add("Slowed 7 if Target has Opportunity");
			this.inputs.Add("Slowed 7 on Critical Hit");
			this.inputs.Add("Slowed 70");
			this.inputs.Add("Slowed 73");
			this.inputs.Add("Slowed 75 if Target is Distressed");
			this.inputs.Add("Slowed 80 if Target is Disrupted");
			this.inputs.Add("Slowed 9 on Critical Hit");
			this.inputs.Add("Slowed 90");
			this.inputs.Add("Slowed 90 if Attacker has Aiming");
			this.inputs.Add("Slowed Recovery Bonus +1");
			this.inputs.Add("Slowed Recovery Bonus +10");
			this.inputs.Add("Slowed Recovery Bonus +2");
			this.inputs.Add("Slowed Recovery Bonus +3");
			this.inputs.Add("Slowed Recovery Bonus +4");
			this.inputs.Add("Slowed Recovery Bonus +5");
			this.inputs.Add("Slowed Recovery Bonus +6");
			this.inputs.Add("Slowed Recovery Bonus +7");
			this.inputs.Add("Slowed Recovery Bonus +8");
			this.inputs.Add("Slowed Recovery Bonus +9");
			this.inputs.Add("Smelter +10");
			this.inputs.Add("Smelter +100");
			this.inputs.Add("Smelter +11");
			this.inputs.Add("Smelter +110");
			this.inputs.Add("Smelter +12");
			this.inputs.Add("Smelter +120");
			this.inputs.Add("Smelter +13");
			this.inputs.Add("Smelter +130");
			this.inputs.Add("Smelter +14");
			this.inputs.Add("Smelter +140");
			this.inputs.Add("Smelter +15");
			this.inputs.Add("Smelter +150");
			this.inputs.Add("Smelter +160");
			this.inputs.Add("Smelter +170");
			this.inputs.Add("Smelter +180");
			this.inputs.Add("Smelter +190");
			this.inputs.Add("Smelter +2");
			this.inputs.Add("Smelter +20");
			this.inputs.Add("Smelter +200");
			this.inputs.Add("Smelter +30");
			this.inputs.Add("Smelter +40");
			this.inputs.Add("Smelter +5");
			this.inputs.Add("Smelter +50");
			this.inputs.Add("Smelter +6");
			this.inputs.Add("Smelter +60");
			this.inputs.Add("Smelter +7");
			this.inputs.Add("Smelter +70");
			this.inputs.Add("Smelter +8");
			this.inputs.Add("Smelter +80");
			this.inputs.Add("Smelter +9");
			this.inputs.Add("Smelter +90");
			this.inputs.Add("Sneak Attack on Disrupted");
			this.inputs.Add("Sneak Attack on Favored to Self");
			this.inputs.Add("Sneak Attack on Flat-Footed");
			this.inputs.Add("Sneak Attack on Immobilize");
			this.inputs.Add("Sneak Attack on Opportunity");
			this.inputs.Add("Sneak Attack on Opportunity to Self");
			this.inputs.Add("Sneak Attack on Untargeted");
			this.inputs.Add("Soldier +10");
			this.inputs.Add("Soldier +100");
			this.inputs.Add("Soldier +110");
			this.inputs.Add("Soldier +120");
			this.inputs.Add("Soldier +130");
			this.inputs.Add("Soldier +140");
			this.inputs.Add("Soldier +150");
			this.inputs.Add("Soldier +160");
			this.inputs.Add("Soldier +170");
			this.inputs.Add("Soldier +180");
			this.inputs.Add("Soldier +190");
			this.inputs.Add("Soldier +20");
			this.inputs.Add("Soldier +200");
			this.inputs.Add("Soldier +30");
			this.inputs.Add("Soldier +40");
			this.inputs.Add("Soldier +50");
			this.inputs.Add("Soldier +60");
			this.inputs.Add("Soldier +70");
			this.inputs.Add("Soldier +80");
			this.inputs.Add("Soldier +90");
			this.inputs.Add("Sonic Damage");
			this.inputs.Add("Sonic Resistant (14 Rounds) to Self");
			this.inputs.Add("Sonic Resistant (26 Rounds) to Self");
			this.inputs.Add("Sonic Resistant (5 Rounds, 12% Chance) to Self if Target has Oblivious");
			this.inputs.Add("Sonic Resistant (5 Rounds, 17% Chance) to Self if Target has Oblivious");
			this.inputs.Add("Sonic Resistant (5 Rounds, 22% Chance) to Self if Target has Oblivious");
			this.inputs.Add("Sonic Resistant (5 Rounds, 28% Chance) to Self if Target has Oblivious");
			this.inputs.Add("Sonic Resistant (5 Rounds, 34% Chance) to Self if Target has Oblivious");
			this.inputs.Add("Sonic Resistant (7 Rounds) to Self");
			this.inputs.Add("Sonic Resistant (8 Rounds)");
			this.inputs.Add("Speed +1%");
			this.inputs.Add("Speed +10%");
			this.inputs.Add("Speed +11%");
			this.inputs.Add("Speed +12%");
			this.inputs.Add("Speed +13%");
			this.inputs.Add("Speed +14%");
			this.inputs.Add("Speed +15%");
			this.inputs.Add("Speed +2%");
			this.inputs.Add("Speed +3%");
			this.inputs.Add("Speed +4%");
			this.inputs.Add("Speed +5%");
			this.inputs.Add("Speed +6%");
			this.inputs.Add("Speed +7%");
			this.inputs.Add("Speed +8%");
			this.inputs.Add("Speed +9%");
			this.inputs.Add("Spellcraft +10");
			this.inputs.Add("Spellcraft +100");
			this.inputs.Add("Spellcraft +11");
			this.inputs.Add("Spellcraft +110");
			this.inputs.Add("Spellcraft +12");
			this.inputs.Add("Spellcraft +120");
			this.inputs.Add("Spellcraft +13");
			this.inputs.Add("Spellcraft +130");
			this.inputs.Add("Spellcraft +14");
			this.inputs.Add("Spellcraft +140");
			this.inputs.Add("Spellcraft +15");
			this.inputs.Add("Spellcraft +150");
			this.inputs.Add("Spellcraft +160");
			this.inputs.Add("Spellcraft +170");
			this.inputs.Add("Spellcraft +180");
			this.inputs.Add("Spellcraft +190");
			this.inputs.Add("Spellcraft +2");
			this.inputs.Add("Spellcraft +20");
			this.inputs.Add("Spellcraft +200");
			this.inputs.Add("Spellcraft +30");
			this.inputs.Add("Spellcraft +40");
			this.inputs.Add("Spellcraft +5");
			this.inputs.Add("Spellcraft +50");
			this.inputs.Add("Spellcraft +6");
			this.inputs.Add("Spellcraft +60");
			this.inputs.Add("Spellcraft +7");
			this.inputs.Add("Spellcraft +70");
			this.inputs.Add("Spellcraft +8");
			this.inputs.Add("Spellcraft +80");
			this.inputs.Add("Spellcraft +9");
			this.inputs.Add("Spellcraft +90");
			this.inputs.Add("Splash");
			this.inputs.Add("Splash to Self");
			this.inputs.Add("Stationary");
			this.inputs.Add("Stealth +10");
			this.inputs.Add("Stealth +100");
			this.inputs.Add("Stealth +11");
			this.inputs.Add("Stealth +110");
			this.inputs.Add("Stealth +12");
			this.inputs.Add("Stealth +120");
			this.inputs.Add("Stealth +13");
			this.inputs.Add("Stealth +130");
			this.inputs.Add("Stealth +14");
			this.inputs.Add("Stealth +140");
			this.inputs.Add("Stealth +15");
			this.inputs.Add("Stealth +150");
			this.inputs.Add("Stealth +16");
			this.inputs.Add("Stealth +160");
			this.inputs.Add("Stealth +17");
			this.inputs.Add("Stealth +170");
			this.inputs.Add("Stealth +18");
			this.inputs.Add("Stealth +180");
			this.inputs.Add("Stealth +19");
			this.inputs.Add("Stealth +190");
			this.inputs.Add("Stealth +2");
			this.inputs.Add("Stealth +20");
			this.inputs.Add("Stealth +200");
			this.inputs.Add("Stealth +21");
			this.inputs.Add("Stealth +23");
			this.inputs.Add("Stealth +24");
			this.inputs.Add("Stealth +25");
			this.inputs.Add("Stealth +30");
			this.inputs.Add("Stealth +4");
			this.inputs.Add("Stealth +40");
			this.inputs.Add("Stealth +5");
			this.inputs.Add("Stealth +50");
			this.inputs.Add("Stealth +6");
			this.inputs.Add("Stealth +60");
			this.inputs.Add("Stealth +7");
			this.inputs.Add("Stealth +70");
			this.inputs.Add("Stealth +8");
			this.inputs.Add("Stealth +80");
			this.inputs.Add("Stealth +9");
			this.inputs.Add("Stealth +90");
			this.inputs.Add("Stonemason +10");
			this.inputs.Add("Stonemason +100");
			this.inputs.Add("Stonemason +110");
			this.inputs.Add("Stonemason +120");
			this.inputs.Add("Stonemason +130");
			this.inputs.Add("Stonemason +140");
			this.inputs.Add("Stonemason +150");
			this.inputs.Add("Stonemason +160");
			this.inputs.Add("Stonemason +170");
			this.inputs.Add("Stonemason +180");
			this.inputs.Add("Stonemason +190");
			this.inputs.Add("Stonemason +2");
			this.inputs.Add("Stonemason +20");
			this.inputs.Add("Stonemason +200");
			this.inputs.Add("Stonemason +30");
			this.inputs.Add("Stonemason +40");
			this.inputs.Add("Stonemason +50");
			this.inputs.Add("Stonemason +60");
			this.inputs.Add("Stonemason +70");
			this.inputs.Add("Stonemason +80");
			this.inputs.Add("Stonemason +90");
			this.inputs.Add("Streak");
			this.inputs.Add("Strengthened (2 Rounds) to Self if Attacker has Favored");
			this.inputs.Add("Strengthened (27 Rounds) to Self");
			this.inputs.Add("Strengthened (7 Rounds)");
			this.inputs.Add("Striking (17 Rounds) to Self");
			this.inputs.Add("Striking (2 Rounds) to All");
			this.inputs.Add("Striking (3 Rounds) to Self");
			this.inputs.Add("Stun (1 Seconds) to All");
			this.inputs.Add("Stun (1 Seconds, 25% Chance) to All");
			this.inputs.Add("Stun (13 Seconds) to All");
			this.inputs.Add("Stun (2 Seconds) if Target has Opportunity");
			this.inputs.Add("Stun (2 Seconds) if Target is Dazed");
			this.inputs.Add("Stun (2 Seconds) to All");
			this.inputs.Add("Stun (2 Seconds) to All Targets with Dazed");
			this.inputs.Add("Stun (2 seconds, 100% Chance) on Critical Hit");
			this.inputs.Add("Stun (2 Seconds, 25% Chance)");
			this.inputs.Add("Stun (2 seconds, 40% Chance) on Critical Hit");
			this.inputs.Add("Stun (2 seconds, 60% Chance) on Critical Hit");
			this.inputs.Add("Stun (2 seconds, 80% Chance) on Critical Hit");
			this.inputs.Add("Stun (2 seconds, 90% Chance) on Critical Hit");
			this.inputs.Add("Stun (3 Seconds) if Target is Distressed");
			this.inputs.Add("Stun (3 Seconds) to All");
			this.inputs.Add("Stun (3 Seconds, 25% Chance) to All");
			this.inputs.Add("Stun (4 Seconds)");
			this.inputs.Add("Stun (4 Seconds) if Target is Disrupted");
			this.inputs.Add("Stun (4 Seconds) if Target is Distressed");
			this.inputs.Add("Stun (4 Seconds) to All Targets with Dazed");
			this.inputs.Add("Stun (5 Seconds)");
			this.inputs.Add("Stun (5 Seconds) if Target is Distressed");
			this.inputs.Add("Stun (5 Seconds) to All");
			this.inputs.Add("Stun (6 Seconds)");
			this.inputs.Add("Survival +10");
			this.inputs.Add("Survival +100");
			this.inputs.Add("Survival +11");
			this.inputs.Add("Survival +110");
			this.inputs.Add("Survival +12");
			this.inputs.Add("Survival +120");
			this.inputs.Add("Survival +13");
			this.inputs.Add("Survival +130");
			this.inputs.Add("Survival +14");
			this.inputs.Add("Survival +140");
			this.inputs.Add("Survival +15");
			this.inputs.Add("Survival +150");
			this.inputs.Add("Survival +16");
			this.inputs.Add("Survival +160");
			this.inputs.Add("Survival +170");
			this.inputs.Add("Survival +180");
			this.inputs.Add("Survival +190");
			this.inputs.Add("Survival +2");
			this.inputs.Add("Survival +20");
			this.inputs.Add("Survival +200");
			this.inputs.Add("Survival +24");
			this.inputs.Add("Survival +28");
			this.inputs.Add("Survival +30");
			this.inputs.Add("Survival +4");
			this.inputs.Add("Survival +40");
			this.inputs.Add("Survival +5");
			this.inputs.Add("Survival +50");
			this.inputs.Add("Survival +6");
			this.inputs.Add("Survival +60");
			this.inputs.Add("Survival +7");
			this.inputs.Add("Survival +70");
			this.inputs.Add("Survival +8");
			this.inputs.Add("Survival +80");
			this.inputs.Add("Survival +9");
			this.inputs.Add("Survival +90");
			this.inputs.Add("Tailor +10");
			this.inputs.Add("Tailor +100");
			this.inputs.Add("Tailor +11");
			this.inputs.Add("Tailor +110");
			this.inputs.Add("Tailor +12");
			this.inputs.Add("Tailor +120");
			this.inputs.Add("Tailor +13");
			this.inputs.Add("Tailor +130");
			this.inputs.Add("Tailor +14");
			this.inputs.Add("Tailor +140");
			this.inputs.Add("Tailor +15");
			this.inputs.Add("Tailor +150");
			this.inputs.Add("Tailor +160");
			this.inputs.Add("Tailor +170");
			this.inputs.Add("Tailor +180");
			this.inputs.Add("Tailor +190");
			this.inputs.Add("Tailor +2");
			this.inputs.Add("Tailor +20");
			this.inputs.Add("Tailor +200");
			this.inputs.Add("Tailor +30");
			this.inputs.Add("Tailor +40");
			this.inputs.Add("Tailor +5");
			this.inputs.Add("Tailor +50");
			this.inputs.Add("Tailor +6");
			this.inputs.Add("Tailor +60");
			this.inputs.Add("Tailor +7");
			this.inputs.Add("Tailor +70");
			this.inputs.Add("Tailor +8");
			this.inputs.Add("Tailor +80");
			this.inputs.Add("Tailor +9");
			this.inputs.Add("Tailor +90");
			this.inputs.Add("Tanner +10");
			this.inputs.Add("Tanner +100");
			this.inputs.Add("Tanner +11");
			this.inputs.Add("Tanner +110");
			this.inputs.Add("Tanner +12");
			this.inputs.Add("Tanner +120");
			this.inputs.Add("Tanner +13");
			this.inputs.Add("Tanner +130");
			this.inputs.Add("Tanner +14");
			this.inputs.Add("Tanner +140");
			this.inputs.Add("Tanner +15");
			this.inputs.Add("Tanner +150");
			this.inputs.Add("Tanner +160");
			this.inputs.Add("Tanner +170");
			this.inputs.Add("Tanner +180");
			this.inputs.Add("Tanner +190");
			this.inputs.Add("Tanner +2");
			this.inputs.Add("Tanner +20");
			this.inputs.Add("Tanner +200");
			this.inputs.Add("Tanner +30");
			this.inputs.Add("Tanner +40");
			this.inputs.Add("Tanner +5");
			this.inputs.Add("Tanner +50");
			this.inputs.Add("Tanner +6");
			this.inputs.Add("Tanner +60");
			this.inputs.Add("Tanner +7");
			this.inputs.Add("Tanner +70");
			this.inputs.Add("Tanner +8");
			this.inputs.Add("Tanner +80");
			this.inputs.Add("Tanner +9");
			this.inputs.Add("Tanner +90");
			this.inputs.Add("Targets Fortitude");
			this.inputs.Add("Targets Reflex");
			this.inputs.Add("Targets Will");
			this.inputs.Add("Tenacious (10 Rounds) to Self");
			this.inputs.Add("Tenacious (2 Rounds) to Self if Attacker has Mighty");
			this.inputs.Add("Tenacious (6 Rounds)");
			this.inputs.Add("Tenacious (7 Rounds) to All");
			this.inputs.Add("Tenacious (7 Rounds) to Self");
			this.inputs.Add("Tenacious (9 Rounds) to Self");
			this.inputs.Add("Unbalanced (1 Rounds)");
			this.inputs.Add("Unbalanced (1 Rounds) if Attacker has Replying");
			this.inputs.Add("Unbalanced (1 Rounds) if Target has Opportunity");
			this.inputs.Add("Unbalanced (1 Rounds) if Target is Disrupted");
			this.inputs.Add("Unbalanced (1 Rounds) to All");
			this.inputs.Add("Unbalanced (1 Rounds, 25% Chance)");
			this.inputs.Add("Unbalanced (1 Rounds, 50% Chance)");
			this.inputs.Add("Unbalanced (1 Rounds, 50% Chance) to All");
			this.inputs.Add("Unbalanced (1 Rounds, 75% Chance)");
			this.inputs.Add("Unbalanced (2 Rounds)");
			this.inputs.Add("Unbalanced (2 Rounds) to All");
			this.inputs.Add("Unbalanced (3 Rounds)");
			this.inputs.Add("Unbalanced (3 Rounds) if Target has Opportunity");
			this.inputs.Add("Unbalanced (4 Rounds)");
			this.inputs.Add("Unbalanced (5 Rounds)");
			this.inputs.Add("Unbalanced (5 Rounds) to All Targets with Disrupted");
			this.inputs.Add("Unbalanced (6 Rounds)");
			this.inputs.Add("Unguarded (1 Round) to Self");
			this.inputs.Add("Weaponsmith +10");
			this.inputs.Add("Weaponsmith +100");
			this.inputs.Add("Weaponsmith +11");
			this.inputs.Add("Weaponsmith +110");
			this.inputs.Add("Weaponsmith +12");
			this.inputs.Add("Weaponsmith +120");
			this.inputs.Add("Weaponsmith +13");
			this.inputs.Add("Weaponsmith +130");
			this.inputs.Add("Weaponsmith +14");
			this.inputs.Add("Weaponsmith +140");
			this.inputs.Add("Weaponsmith +15");
			this.inputs.Add("Weaponsmith +150");
			this.inputs.Add("Weaponsmith +160");
			this.inputs.Add("Weaponsmith +170");
			this.inputs.Add("Weaponsmith +180");
			this.inputs.Add("Weaponsmith +190");
			this.inputs.Add("Weaponsmith +2");
			this.inputs.Add("Weaponsmith +20");
			this.inputs.Add("Weaponsmith +200");
			this.inputs.Add("Weaponsmith +30");
			this.inputs.Add("Weaponsmith +40");
			this.inputs.Add("Weaponsmith +5");
			this.inputs.Add("Weaponsmith +50");
			this.inputs.Add("Weaponsmith +6");
			this.inputs.Add("Weaponsmith +60");
			this.inputs.Add("Weaponsmith +7");
			this.inputs.Add("Weaponsmith +70");
			this.inputs.Add("Weaponsmith +8");
			this.inputs.Add("Weaponsmith +80");
			this.inputs.Add("Weaponsmith +9");
			this.inputs.Add("Weaponsmith +90");
			this.inputs.Add("Weaver +10");
			this.inputs.Add("Weaver +100");
			this.inputs.Add("Weaver +11");
			this.inputs.Add("Weaver +110");
			this.inputs.Add("Weaver +12");
			this.inputs.Add("Weaver +120");
			this.inputs.Add("Weaver +13");
			this.inputs.Add("Weaver +130");
			this.inputs.Add("Weaver +14");
			this.inputs.Add("Weaver +140");
			this.inputs.Add("Weaver +15");
			this.inputs.Add("Weaver +150");
			this.inputs.Add("Weaver +160");
			this.inputs.Add("Weaver +170");
			this.inputs.Add("Weaver +180");
			this.inputs.Add("Weaver +190");
			this.inputs.Add("Weaver +2");
			this.inputs.Add("Weaver +20");
			this.inputs.Add("Weaver +200");
			this.inputs.Add("Weaver +30");
			this.inputs.Add("Weaver +40");
			this.inputs.Add("Weaver +5");
			this.inputs.Add("Weaver +50");
			this.inputs.Add("Weaver +6");
			this.inputs.Add("Weaver +60");
			this.inputs.Add("Weaver +7");
			this.inputs.Add("Weaver +70");
			this.inputs.Add("Weaver +8");
			this.inputs.Add("Weaver +80");
			this.inputs.Add("Weaver +9");
			this.inputs.Add("Weaver +90");
			this.inputs.Add("Will Defense Bonus +1");
			this.inputs.Add("Will Defense Bonus +10");
			this.inputs.Add("Will Defense Bonus +11");
			this.inputs.Add("Will Defense Bonus +12");
			this.inputs.Add("Will Defense Bonus +13");
			this.inputs.Add("Will Defense Bonus +14");
			this.inputs.Add("Will Defense Bonus +15");
			this.inputs.Add("Will Defense Bonus +16");
			this.inputs.Add("Will Defense Bonus +2");
			this.inputs.Add("Will Defense Bonus +20");
			this.inputs.Add("Will Defense Bonus +24");
			this.inputs.Add("Will Defense Bonus +28");
			this.inputs.Add("Will Defense Bonus +3");
			this.inputs.Add("Will Defense Bonus +32");
			this.inputs.Add("Will Defense Bonus +36");
			this.inputs.Add("Will Defense Bonus +4");
			this.inputs.Add("Will Defense Bonus +40");
			this.inputs.Add("Will Defense Bonus +5");
			this.inputs.Add("Will Defense Bonus +6");
			this.inputs.Add("Will Defense Bonus +7");
			this.inputs.Add("Will Defense Bonus +8");
			this.inputs.Add("Will Defense Bonus +9");

			#endregion

			this.inputs.Clear();
			this.inputs.Add("Bleeding 25 to All Targets if Attacker has Aware");
		}

		private List<string> inputs = new List<string>();

		private void matchButton_Click(object sender, EventArgs e)
		{
			string pattern = this.patternEditor.Text;

			List<string> names = this.GetNames(pattern);
			foreach (var input in this.inputs)
			{
				MatchesDataSet.InputsRow row = this.matchesDataSet.Inputs.NewInputsRow();
				row.EffectText = input;
				if (Regex.IsMatch(input, pattern, RegexOptions.IgnoreCase))
				{
					row.IsMatch = "True";
					foreach (string name in this.GetNames(pattern))
					{
						row[name] = Regex.Replace(input, pattern, "${" + name + "}", RegexOptions.IgnoreCase);
					}
				}
				this.matchesDataSet.Inputs.AddInputsRow(row);
			}
		}

		private List<string> GetNames(string pattern)
		{
			string namePattern = @"\(\?\<(?<Name>[A-Za-z]*)\>";
			List<string> names = new List<string>();

			MatchCollection nameMatches = Regex.Matches(pattern, namePattern);
			foreach (Match nameMatch in nameMatches)
			{
				names.Add(Regex.Replace(nameMatch.Value, namePattern, "${Name}"));
			}

			return names;
		}
	}
}
